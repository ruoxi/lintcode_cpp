Validate Binary Search Tree
Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
A single node tree is a BST
Have you met this question in a real interview? Yes
Example
An example:

  2
 / \
1   4
   / \
  3   5
The above binary tree is serialized as {2,1,4,#,#,3,5} (in level order).
/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param root: The root of binary tree.
     * @return: True if the binary tree is BST, or false
     */
    class Result
    {
    public:
        int minV;
        int maxV;
        bool isValid;
        Result(int a, int b, bool isV): minV(a), maxV(b), isValid(isV) {}
    };
    bool isValidBST(TreeNode *root) {
        // write your code here
        
        if(root == NULL) return true;
        
        Result res = helper(root);
        
        return res.isValid;
    }
    
    Result helper(TreeNode* root)
    {
        if(root == NULL) 
        {
            return Result(INT_MAX, INT_MIN, true);
        }
        
        Result left = helper(root->left);
        Result right = helper(root->right);
        
        if(!left.isValid || !right.isValid)
        {
            return Result(0, 0, false);
        }
        
        //Note: here check root->left or root->right is Null is very important
        //otherwise it will fail if tree has one root INT_MAX/INT_MIN
        if(root->left != NULL && left.maxV >= root->val)
        {
            return Result(0, 0, false);
        }
        
        if(root->right != NULL && right.minV <= root->val)
        {
            return Result(0, 0, false);
        }
        
        return Result(min(left.minV, root->val), max(right.maxV, root->val), true);
    }
};
