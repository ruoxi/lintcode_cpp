Unique Paths II

 Description
 Notes
 Testcase
 Judge
Follow up for "Unique Paths":

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.

 Notice

m and n will be at most 100.
class Solution {
public:
    /**
     * @param obstacleGrid: A list of lists of integers
     * @return: An integer
     */ 
    //state: dp[i][j]表示从（0，0）到(i,j)的unique paths
    //function: dp[i][j] = obstacleGrid[i][j] == 1 ? 0 : dp[i-1][j] + dp[i][j-1]
    //initialization: dp[0][*] = obstacleGrid[0][*] == 1 ? 0 : 1 一旦有一个是1，之后的所有dp[0][*]=0
    //                dp[*][0] = obstacleGrid[*][0] == 1 ? 0 : 1 
    
    int uniquePathsWithObstacles(vector<vector<int> > &obstacleGrid) {
        // write your code here
        
        if(obstacleGrid.empty() || obstacleGrid.at(0).empty()) return 0;
        
        int n = obstacleGrid.size();
        int m = obstacleGrid.at(0).size();
        
        vector<vector<int>> dp(n, vector<int>(m, 0));
        
        for(int i = 0; i < n; i++)
        {
            if(obstacleGrid[i][0] == 1)
            {
                break;
            }
            
            dp[i][0] = 1;
        }
        
        for(int j = 0; j < m; j++)
        {
            if(obstacleGrid[0][j] == 1)
            {
                break;
            }
            
            dp[0][j] = 1;
        }
        
        for(int i = 1; i < n; i++)
        {
            for(int j = 1; j < m; j++)
            {
                dp[i][j] = obstacleGrid[i][j] == 1 ? 0 : dp[i-1][j] + dp[i][j-1];
            }
        }
        
        return dp[n-1][m-1];
    }
};
