Merge k Sorted Lists

 Description
 Notes
 Testcase
 Judge
Merge k sorted linked lists and return it as one sorted list.

Analyze and describe its complexity.

Have you met this question in a real interview? Yes
Example
Given lists:

[
  2->4->null,
  null,
  -1->null
],
return -1->2->4->null.




/**
 * Definition of ListNode
 * class ListNode {
 * public:
 *     int val;
 *     ListNode *next;
 *     ListNode(int val) {
 *         this->val = val;
 *         this->next = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param lists: a list of ListNode
     * @return: The head of one sorted list.
     */
     
    class Comparator
    {
    public:
        bool operator()(const ListNode* a, const ListNode* b)
        {
            return a->val > b->val;
        }
    };
    
    ListNode *mergeKLists(vector<ListNode *> &lists) {
        // write your code here
        
        if(lists.empty()) return NULL;
        
        int n = lists.size();
        
        priority_queue<ListNode*, vector<ListNode*>, Comparator> pq;
        
        for(int i = 0; i < n; i++)
        {
            if(lists[i] == NULL) continue;
            
            pq.push(lists[i]);
        }
        
        ListNode dummy(-1);
        ListNode* prev = &dummy;
        while(!pq.empty())
        {
            ListNode* cur = pq.top();
            pq.pop();
            
            prev->next = cur;
            prev = prev->next;
            if(cur->next != NULL)
            {
                pq.push(cur->next);
            }
            
        }
        return dummy.next;
    }
};


