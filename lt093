Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Have you met this question in a real interview? Yes
Example
Given binary tree A = {3,9,20,#,#,15,7}, B = {3,#,20,15,7}

A)  3            B)    3 
   / \                  \
  9  20                 20
    /  \                / \
   15   7              15  7
The binary tree A is a height-balanced binary tree, but B is not.


/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param root: The root of binary tree.
     * @return: True if this Binary tree is Balanced, or false.
     */
     
    class Result
    {
    public:
        int height;
        bool isbalanced;
        Result(int v, bool b): height(v), isbalanced(b) {}
        
    };
    
    bool isBalanced(TreeNode *root) {
        // write your code here
        
        //need to check if balanced in every level
        //need to record the previous result and also the height of left& right tree
        
        if(root == NULL)
        {
            return true;
        }
        
        Result res = helper(root);
        return res.isbalanced;
    }
    
    
    Result helper(TreeNode* root)
    {
        if(root == NULL)
        {
            return Result(0, true);
        }
        
        Result left = helper(root->left);
        Result right = helper(root->right);
        
        if(!left.isbalanced || !right.isbalanced)
        {
            return Result(-1, false);
        }
        
        if(abs(left.height - right.height) > 1)
        {
            return Result(-1, false);
        }
        
        return Result(max(left.height, right.height)+1, true);
    }
};
