Complete Binary Tree

Check a binary tree is completed or not. A complete binary tree is a binary tree that every level is completed filled except the deepest level. In the deepest level, all nodes must be as left as possible. See more definition

Have you met this question in a real interview? Yes
Example
    1
   / \
  2   3
 /
4
is a complete binary.

    1
   / \
  2   3
   \
    4
is not a complete binary.
/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param root, the root of binary tree.
     * @return true if it is a complete binary tree, or false.
     */
    
    //if left height == right height then 
    //left needs to be a full tree, right needs to be a complete tree
    //if left height = right height+1
    //left is a complete tree, right is a full tree
    class Result
    {
    public:
        bool isComplete;
        bool isFull;
        int depth;
        Result(int d, bool complete, bool full)
        :depth(d), isComplete(complete), isFull(full) {}
    };
    
    bool isComplete(TreeNode* root) {
        // Write your code here
        if(root == NULL) return true;
        
        Result res = helper(root);
        return res.isComplete;
        
    }
    
    
    Result helper(TreeNode* root)
    {
        if(root == NULL)
        {
            return Result(0, true, true);
        }
        
        Result left = helper(root->left);
        Result right = helper(root->right);
        
        //cout << "root == " << root->val << " left depth=" << left.depth << " right depth=" << right.depth << endl;
        if(!left.isComplete || !right.isComplete)
        {
            return Result(-1, false, false);
        }
        
        if(left.depth == right.depth)
        {
            if(left.isFull && right.isComplete)
            {
                return Result(left.depth+1, left.isComplete,left.isFull&& right.isFull);
            }
            
        }
        
        if(left.depth == right.depth+1)
        {
            //left is complete, right is full
            if(left.isComplete && right.isFull)
            {
                return Result(left.depth+1, true, false);
            }

        }
        
        return Result(-1, false, false);
    }
};
