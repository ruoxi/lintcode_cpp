Find the Weak Connected Component in the Directed Graph

 Description
 Notes
 Testcase
 Judge
Find the number Weak Connected Component in the directed graph. Each node in the graph contains a label and a list of its neighbors. (a connected set of a directed graph is a subgraph in which any two vertices are connected by direct edge path.)

 Notice

Sort the element in the set in increasing order

Have you met this question in a real interview? Yes
Example
Given graph:

A----->B  C
 \     |  | 
  \    |  |
   \   |  |
    \  v  v
     ->D  E <- F
Return {A,B,D}, {C,E,F}. Since there are two connected component which are {A,B,D} and {C,E,F}

/**
 * Definition for Directed graph.
 * struct DirectedGraphNode {
 *     int label;
 *     vector<DirectedGraphNode *> neighbors;
 *     DirectedGraphNode(int x) : label(x) {};
 * };
 */
class Solution {
public:
    /**
     * @param nodes a array of directed graph node
     * @return a connected set of a directed graph
     */
    vector<vector<int>> connectedSet2(vector<DirectedGraphNode*>& nodes) {
        // Write your code here
        
        if(nodes.empty()) return vector<vector<int>>();
        
        int n = nodes.size();
        
        unordered_map<int, int> father;
        
        for(int i = 0; i < n; i++)
        {
            DirectedGraphNode* node = nodes[i];
            father[node->label] = node->label;
        }
        
        for(int i = 0; i < n; i++)
        {
            DirectedGraphNode* node = nodes[i];
            
            
            for(int j = 0; j < node->neighbors.size(); j++)
            {
                DirectedGraphNode* neighbor = node->neighbors[j];
                
                //union two nodes
                int root_node = find(node->label, father);
                int root_neighbor = find(neighbor->label, father);
                
                if(root_node != root_neighbor)
                {
                    father[root_neighbor] = root_node;
                }
            }
        }
        
        //now collect result
        //root to all its connected components
        unordered_map<int, set<int>> table;
        for(auto node : father)
        {
            int root = find(node.first, father);
            table[root].insert(node.first);
        }
        
        vector<vector<int>> res;
        for(auto node : table)
        {
            vector<int> v(node.second.begin(), node.second.end());
            res.push_back(v);
        }
        
        return res;
    }
    
    int find(int x, unordered_map<int, int>& father)
    {
        int px = father[x];
        while(px != father[px])
        {
            px = father[px];
        }
        
        int root = px;
        px = x;
        while(px != father[px])
        {
            int tmp = father[px];
            father[px] = root;
            px = tmp;
        }
        
        return root;
    }
};
