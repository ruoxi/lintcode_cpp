Nuts & Bolts Problem

 Description
 Notes
 Testcase
 Judge
Given a set of n nuts of different sizes and n bolts of different sizes. There is a one-one mapping between nuts and bolts. Comparison of a nut to another nut or a bolt to another bolt is not allowed. It means nut can only be compared with bolt and bolt can only be compared with nut to see which one is bigger/smaller.

We will give you a compare function to compare nut with bolt.

Have you met this question in a real interview? Yes
Example
Given nuts = ['ab','bc','dd','gg'], bolts = ['AB','GG', 'DD', 'BC'].

Your code should find the matching bolts and nuts.

one of the possible return:

nuts = ['ab','bc','dd','gg'], bolts = ['AB','BC','DD','GG'].

we will tell you the match compare function. If we give you another compare function.

the possible return is the following:

nuts = ['ab','bc','dd','gg'], bolts = ['BC','AA','DD','GG'].

So you must use the compare function that we give to do the sorting.

The order of the nuts or bolts does not matter. You just need to find the matching bolt for each nut.

//Runtime: O(nlogn)
//Space:O(1)


/**
 * class Comparator {
 *     public:
 *      int cmp(string a, string b);
 * };
 * You can use compare.cmp(a, b) to compare nuts "a" and bolts "b",
 * if "a" is bigger than "b", it will return 1, else if they are equal,
 * it will return 0, else if "a" is smaller than "b", it will return -1.
 * When "a" is not a nut or "b" is not a bolt, it will return 2, which is not valid.
*/
class Solution {
public:
    /**
     * @param nuts: a vector of integers
     * @param bolts: a vector of integers
     * @param compare: a instance of Comparator
     * @return: nothing
     */
     
    //思路：从nuts中拿一个，用来对bolts进行partition
    //把小于pivot的数放到它之前， 把大于它的放到他的后面
    //当bolts拍好后， 用bolts中对应的数来partition nuts
    void sortNutsAndBolts(vector<string> &nuts, vector<string> &bolts, Comparator compare) {
        // write your code here
        
        if(nuts.empty() || bolts.empty()) return;
        if(nuts.size() != bolts.size()) return;
        
        int n = nuts.size();
        
        int start = 0, end = n-1;
        
        helper(nuts, bolts, start, end, compare);
        
        
    }
    
    
    void helper(vector<string>& nuts, vector<string>& bolts, int start, int end, Comparator compare)
    {
        if(start > end) return;
        if(start == end) return;
        
        string pivotNut = nuts[start];
        //cout << "start=" << start << " end=" << end << " pivotNut=" << pivotNut << endl;
        int boltPos = partitionBolt(bolts, start, end, pivotNut, compare);
        
        string pivotBolt = bolts[boltPos];
        //cout << "pivotBolt=" << pivotBolt << " boltPos=" << boltPos << endl;
        int nutPos = partitionNut(nuts, start, end, pivotBolt, compare);
        //cout << "nutpos=" << nutPos << endl;
        helper(nuts, bolts, start, nutPos-1, compare);
        helper(nuts, bolts, nutPos+1, end, compare);
        
    }
    
    int partitionNut(vector<string>& nuts, int start, int end, string pivotBolt, Comparator compare)
    {
        int left = start, right = end;
        
        string nutpivot = nuts[left];
        //cout  << "nutpivot=" << nutpivot << endl;
        while(left < right)
        {
            while(left < right && compare.cmp(nuts[right], pivotBolt) == 1)
            {
                right--;
            }
            
            nuts[left] = nuts[right];
            while(left< right && compare.cmp(nuts[left], pivotBolt) ==-1)
            {
                left++;
            }
            
            nuts[right] = nuts[left];
        }
        
        nuts[left] = nutpivot;
        return left;
    }
    
    
    int partitionBolt(vector<string>& bolts, int start, int end, string pivotNut,Comparator compare)
    {
        int left = start, right = end;
        
        int bolt = getBolt(bolts, pivotNut, start, end, compare);
        //cout << " partition bolt pos=" << bolt << endl;
        swap(bolts[left], bolts[bolt]);
        
        string boltpivot = bolts[left];
        //cout << "partition, boltpivot=" << boltpivot << endl;
        while(left<right)
        {
            while(left < right && compare.cmp(pivotNut, bolts[right]) == -1)
            {
                right--;
            }
            
            bolts[left] = bolts[right];
            
            while(left < right && compare.cmp(pivotNut, bolts[left]) ==1)
            {
                left++;
            }
            
            bolts[right] = bolts[left];
        }
        
        bolts[left] = boltpivot;
        return left;
    }
    
    int getBolt(vector<string>& bolts, string pivot, int start, int end, Comparator compare)
    {
        for(int i = start; i <= end; i++)
        {
            if(compare.cmp(pivot, bolts[i]) == 0)
            {
                return i;
            }
        }
        
        return -1;
    }
};
