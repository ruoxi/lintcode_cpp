N-Queens

 Description
 Notes
 Testcase
 Judge
The n-queens puzzle is the problem of placing n queens on an n×n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

Have you met this question in a real interview? Yes
Example
There exist two distinct solutions to the 4-queens puzzle:

[
  // Solution 1
  [".Q..",
   "...Q",
   "Q...",
   "..Q."
  ],
  // Solution 2
  ["..Q.",
   "Q...",
   "...Q",
   ".Q.."
  ]
]

class Solution {
public:
    /**
     * Get all distinct N-Queen solutions
     * @param n: The number of queens
     * @return: All distinct solutions
     * For example, A string '...Q' shows a queen on forth position
     */
    vector<vector<string> > solveNQueens(int n) {
        // write your code here
        //任意两个不能在同一行，同一列，对角线上
        if(n == 0) return vector<vector<string>>();
        
        
        vector<int> pos;
        vector<vector<string>> res;
        
        dfs(n, 0, pos, res);
        return res;
        
    }
    
    //n is the number of rows left
    //pos is the column number for each row
    void dfs(int n, int row, vector<int>& pos, vector<vector<string>>& res)
    {
        if(row == n)
        {
            vector<string> sol = getBoard(pos);
            res.push_back(sol);
            return;
        }
        
        //对于当前行，枚举可能选择的column number
        for(int i = 0; i < n; i++)
        {
            if(!isValid(pos, i)) continue;
            
            pos.push_back(i);
            
            dfs(n, row+1, pos, res);
            pos.pop_back();
        }
    }
    
    bool isValid(vector<int>& pos, int cur)
    {
        if(pos.empty()) return true;
        
        int n = pos.size();
        
        for(int i = 0; i < n; i++)
        {
            //check if in same column
            if(pos[i] == cur) return false;
            //check if in diagnoal
            if(i + pos[i] == cur + n) return false;
            if(i-pos[i] == n-cur) return false;
        }
        
        return true;
        
    }
    
    
    vector<string> getBoard(vector<int>& pos)
    {
        int n = pos.size();

        vector<string> res(n, "");
        
        for(int i = 0 ; i< n; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(j == pos[i])
                {
                    res[i] += 'Q';
                }
                else
                {
                    res[i] += '.';
                }
            }
        }
        return res;
    }
};
