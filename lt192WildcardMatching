Wildcard Matching

 Description
 Notes
 Testcase
 Judge
Implement wildcard pattern matching with support for '?' and '*'.

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

Have you met this question in a real interview? Yes
Example
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "*") → true
isMatch("aa", "a*") → true
isMatch("ab", "?*") → true
isMatch("aab", "c*a*b") → false

class Solution {
public:
    /**
     * @param s: A string 
     * @param p: A string includes "?" and "*"
     * @return: A boolean
     */
     
    //state: dp[i][j]表示s[0...i-1] matches to p[0..j-1]
    //function: dp[i][j] = dp[i-1][j-1] && s[i-1] == p[j-1] if p[j-1] is char
    //                   = dp[i-1][j-1] if p[j-1] == '?'
    //                   = dp[i-1][j-1] || dp[i][j-1]  || dp[i-1][j] && s[i-1] == p[j-2] if p[j-1] = *
    //initialization: dp[0][0] = true
    //                dp[0][j] = dp[0][j-1] && p[j-1] == '*'
    bool isMatch(const char *s, const char *p) {
        // write your code here
        if(s== NULL || p== NULL) return false;
        
        int slen = strlen(s);
        int plen = strlen(p);
        
        vector<vector<bool>> dp(2, vector<bool>(plen+1, false));
        
        dp[0][0] = true;
        //vector<bool> dp(plen+1,false);
        //dp[0] = true;
        for(int i = 1; i <= plen; i++)
        {
            dp[0][i] = dp[0][i-1] && p[i-1] == '*';
            //dp[i] = dp[i-1] && p[i-1] == '*';
        }
        
        for(int i = 1; i<= slen; i++)
        {
            vector<bool> cur(plen+1, false);
            dp[i%2][0] = false;
            for(int j = 1; j <= plen; j++)
            {
                dp[i%2][j] = false;
                if(s[i-1] == p[j-1])
                {
                    dp[i%2][j] = dp[(i-1)%2][j-1];
                    //cur[j] = dp[j-1];
                }
                else if(p[j-1] == '?')
                {
                    dp[i%2][j] = dp[(i-1)%2][j-1];
                    //cur[j] = dp[j-1];
                }
                else if(p[j-1] == '*')
                {
                    dp[i%2][j] = dp[i%2][j-1] || dp[(i-1)%2][j];
                    //cur[j] = cur[j-1] || dp[j];
                }
            }
            //dp = cur;
        }
        
        return dp[slen%2][plen];
        //return dp[plen];
    }
};
