Find the Connected Component in the Undirected Graph

 Description
 Notes
 Testcase
 Judge
Find the number connected component in the undirected graph. Each node in the graph contains a label and a list of its neighbors. (a connected component (or just component) of an undirected graph is a subgraph in which any two vertices are connected to each other by paths, and which is connected to no additional vertices in the supergraph.)

 Notice

Each connected component should sort by label.

Have you met this question in a real interview? Yes
Clarification
Learn more about representation of graphs

Example
Given graph:

A------B  C
 \     |  | 
  \    |  |
   \   |  |
    \  |  |
      D   E
Return {A,B,D}, {C,E}. Since there are two connected component which is {A,B,D}, {C,E}

/**
 * Definition for Undirected graph.
 * struct UndirectedGraphNode {
 *     int label;
 *     vector<UndirectedGraphNode *> neighbors;
 *     UndirectedGraphNode(int x) : label(x) {};
 * };
 */
class Solution {
public:
    /**
     * @param nodes a array of Undirected graph node
     * @return a connected set of a Undirected graph
     */
    vector<vector<int>> connectedSet(vector<UndirectedGraphNode*>& nodes) {
        // Write your code here
        if(nodes.empty()) return vector<vector<int>>();
        
        int n = nodes.size();
        
        unordered_map<int, int> father;
        for(int i = 0; i < n; i++)
        {
            UndirectedGraphNode* node = nodes[i];
            father[node->label] = node->label;
        }
        
        for(auto node : nodes)
        {
            for(auto neighbor: node->neighbors)
            {
                int root_node = find(node->label, father);
                int root_neighbor = find(neighbor->label, father);
                
                if(root_node != root_neighbor)
                {
                    father[root_neighbor] = root_node;
                }
            }
        }
        
        //now collect the result
        unordered_map<int, set<int>> table;
        for(auto node: father)
        {
            int root = find(node.first,father);
            table[root].insert(node.first);
        }
        
        vector<vector<int>> res;
        for(auto node : table)
        {
            vector<int> cur(node.second.begin(), node.second.end());
            res.push_back(cur);
        }
        
        return res;
    }
    
    int find(int x, unordered_map<int, int>& father)
    {
        int px = father[x];
        while(px != father[px])
        {
            px = father[px];
        }
        
        int root = px;
        px = x;
        while(px != father[px])
        {
            int tmp = father[px];
            father[px] = root;
            px = tmp;
        }
        
        return root;
    }
};
