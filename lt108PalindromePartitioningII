Palindrome Partitioning II

 Description
 Notes
 Testcase
 Judge
Given a string s, cut s into some substrings such that every substring is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of s.

Have you met this question in a real interview? Yes
Example
Given s = "aab",

Return 1 since the palindrome partitioning ["aa", "b"] could be produced using 1 cut.


class Solution {
public:
    /**
     * @param s a string
     * @return an integer
     */
    //state: dp[i]表示s[0...i-1]中由最少多少个回文组成
    //function: dp[i] = min(dp[j] + 1 if s[j-1...i-1] is palindrome) where 0 <=j <=i
    //initialiation: dp[0] = 0
    
    int minCut(string s) {
        // write your code here
        if(s.empty()) return 0;
        
        int n = s.length();
        vector<int> dp(n+1, INT_MAX);
        dp[0] = 0;
        
        vector<vector<bool>> ispalindrome = processpalindrome(s);
        
        for(int i = 1; i <=n; i++)
        {
            for(int j = i-1;j >=0; j--)
            {
                //cout << "i=" << i << " j=" << j << " ispalindrome[j][i-1]=" << ispalindrome[j][i-1] << endl;
                if(ispalindrome[j][i-1])
                {
                    dp[i] = min(dp[i], dp[j]+1);
                }
            }
        }
        
        return dp[n]-1;
    }
    
    vector<vector<bool>> processpalindrome(string& s)
    {
        int n = s.length();
        
        if(s.empty()) return vector<vector<bool>>();
        
        //res[i][j] 表示s[i...j]是否是回文， 区间型dp，按区间从小到大计算
        vector<vector<bool>> res(n, vector<bool>(n, false));
        
        for(int i = 0; i < n; i++)
        {
            res[i][i] = true;
        }
        
        for(int i = 0; i < n-1; i++)
        {
            res[i][i+1] = s[i] == s[i+1];
        }
        
        for(int length = 2; length <= n; length++)
        {
            for(int i = 0; i < n-length+1; i++)
            {
                if(s[i] == s[i+length])
                {
                    res[i][i+length] = res[i+1][i+length-1];
                }
            }
        }
        
        
        return res;
        
    }
};

