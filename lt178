 Graph Valid Tree

 Description
 Notes
 Testcase
 Judge
Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

 Notice

You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.

Have you met this question in a real interview? Yes
Example
Given n = 5 and edges = [[0, 1], [0, 2], [0, 3], [1, 4]], return true.

Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], return false.

class Solution {
public:
    /**
     * @param n an integer
     * @param edges a list of undirected edges
     * @return true if it's a valid tree, or false
     */
    bool validTree(int n, vector<vector<int>>& edges) {
        // Write your code here
        //tree 性质： # of edges = # of nodes -1
        int m = edges.size();
        if(n != m+1) return false;
        
        //判断联通并且没有环，当union的时候两个node不能已经有同一个root
        vector<int> father(n, 0);
        int cnt = 0;
        for(int i = 0; i < n; i++)
        {
            father[i] = i;
            cnt++;
        }
        
        for(int i = 0; i < m; i++)
        {
            int a = edges[i][0];
            int b = edges[i][1];
            
            int roota = find(a, father);
            int rootb = find(b, father);
            
            if(roota == rootb)
            {
                //有环
                return false;
            }
            father[rootb] = roota;
            cnt--;
        }
        return cnt == 1;
    }
    
    int find(int a, vector<int>& father)
    {
        int pa = father[a];
        while(pa != father[pa])
        {
            pa = father[pa];
        }
        
        int root = pa;
        pa = a;
        while(pa != father[pa])
        {
            int tmp = father[pa];
            father[pa] = root;
            pa = tmp;
        }
        return root;
    }
};
