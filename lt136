Palindrome Partitioning

 Description
 Notes
 Testcase
 Judge
Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.

Have you met this question in a real interview? Yes
Example
Given s = "aab", return:

[
  ["aa","b"],
  ["a","a","b"]
]


class Solution {
public:
    /**
     * @param s: A string
     * @return: A list of lists of string
     */
     
    //dfs + dp
    //state: dp[i][j]表示s[i...j]是否是palindrome
    //function: dp[i][j] = true if dp[i+1][j-1] && s[i] == s[j]
    //initialization dp[i][i] = true
    
    vector<vector<string>> partition(string s) {
        // write your code here
        
        if(s.empty()) return vector<vector<string>>();
        
        int n = s.length();
        
        vector<vector<bool>> dp(n, vector<bool>(n, false));
        
        for(int i = 0; i < n; i++)
        {
            dp[i][i] = true;
            if(i+1 < n)
            {
                dp[i][i+1] = s[i] == s[i+1];
            }
        }
        
        for(int len = 2; len < n; len++)
        {
            for(int j = 0; j < n; j++)
            {
                if(s[j] == s[j+len])
                {
                    dp[j][j+len] = dp[j+1][j+len-1];
                }
            }
        }
        
        vector<vector<string>> res;
        vector<string> sol;
        
        dfs(s, 0, sol, res, dp);
        
        return res;
    }
    
    void dfs(string& s, int start, vector<string>& sol, vector<vector<string>>& res, vector<vector<bool>>& dp )
    {
        if(start == s.length())
        {
            res.push_back(sol);
            return;
        }
        
        for(int i = start; i < s.length(); i++)
        {
            if(!dp[start][i]) continue;
            
            string str = s.substr(start, i-start+1);
            sol.push_back(str);
            
            dfs(s, i+1, sol, res, dp);
            sol.pop_back();
        }
    }
    
};
