Interleaving String

 Description
 Notes
 Testcase
 Judge
Given three strings: s1, s2, s3, determine whether s3 is formed by the interleaving of s1 and s2.

Have you met this question in a real interview? Yes
Example
For s1 = "aabcc", s2 = "dbbca"

When s3 = "aadbbcbcac", return true.
When s3 = "aadbbbaccc", return false.

class Solution {
public:
    /**
     * Determine whether s3 is formed by interleaving of s1 and s2.
     * @param s1, s2, s3: As description.
     * @return: true of false.
     */
    //双序列型dp
    //state: dp[i][j]表示s1[0...i-1]和s2[0...j-1]能否组成s3[0...i+j-1]
    //function: dp[i][j] = dp[i-1][j] if s1[i-1] == s3[i+j-1]
    //                   = dp[i][j-1] if s2[j-1] == s3[i+j-1]
    //initialization: dp[i][0] = true if dp[i-1][0] && s1[i-1] == s3[i-1]
    //                dp[0][j] = true if dp[0][j-1] && s2[j-1] == s3[j-1]
    bool isInterleave(string s1, string s2, string s3) {
        // write your code here
        if(s1.empty() && s2.empty() && s3.empty()) return true;
        int n = s1.length();
        int m = s2.length();
        int k = s3.length();
        
        if(n+m != k) return false;
        
        vector<vector<bool>> dp(n+1, vector<bool>(m+1, false));
        
        dp[0][0] = true;
        for(int i = 1; i <=n; i++)
        {
            if(!dp[i-1][0]) break;
            
            dp[i][0] = dp[i-1][0] && s1[i-1] == s3[i-1];
        }
        
        for(int j = 1; j <=m; j++)
        {
            if(!dp[0][j-1]) break;
            dp[0][j] = dp[0][j-1] && s2[j-1] == s3[j-1];
        }
        
        for(int i = 1; i <=n; i++)
        {
            for(int j = 1; j <=m; j++)
            {
                if(s1[i-1] == s3[i+j-1])
                {
                    dp[i][j] = dp[i][j] || dp[i-1][j];
                }
                
                if(s2[j-1] == s3[i+j-1])
                {
                    dp[i][j] = dp[i][j] || dp[i][j-1];
                }
            }
        }
        
        return dp[n][m];
        
        
    }
};
