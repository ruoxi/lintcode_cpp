
 Max Tree

Given an integer array with no duplicates. A max tree building on this array is defined as follow:

The root is the maximum number in the array
The left subtree and right subtree are the max trees of the subarray divided by the root number.
Construct the max tree by the given array.

Have you met this question in a real interview? Yes
Example
Given [2, 5, 6, 0, 3, 1], the max tree constructed by this array is:

    6
   / \
  5   3
 /   / \
2   0   1




/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param A: Given an integer array with no duplicates.
     * @return: The root of max tree.
     */
     
    //这里其实是对于每一个A[i]找他的parent
    //看A[i-1, i-2 ...0] 和A[i+1, i+2,...]中离i最近的比它大的两个数中最小的就是他的parent
    //eg. [2,5,6,0,3,1]对于0 来说，6，3都比他大，其中3是他的parent
    //单调递减栈
    TreeNode* maxTree(vector<int> A) {
        // write your code here
        
        if(A.empty()) return NULL;
        
        int n = A.size();
        
        stack<TreeNode*> stk;
        
        for(int i = 0; i < n; i++)
        {
            TreeNode* cur = new TreeNode(A[i]);
            
            //check if any element in stack smaller than cur
            //then it should be cur->left
            while(!stk.empty()&& stk.top()->val < cur->val)
            {
                cur->left = stk.top();
                stk.pop();
            }
            
            if(!stk.empty())
            {
                stk.top()->right = cur;
            }
            
            stk.push(cur);
        }
        
        //get root which is at the beginning of stack
        TreeNode* root = NULL;
        while(!stk.empty())
        {
            root = stk.top();
            stk.pop();
        }
        
        return root;
    }
};
