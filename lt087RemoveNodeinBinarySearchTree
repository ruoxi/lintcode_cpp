Remove Node in Binary Search Tree
Given a root of Binary Search Tree with unique value for each node. Remove the node with given value. If there is no such a node with given value in the binary search tree, do nothing. You should keep the tree still a binary search tree after removal.

Have you met this question in a real interview? Yes
Example
Given binary search tree:

    5
   / \
  3   6
 / \
2   4
Remove 3, you can either return:

    5
   / \
  2   6
   \
    4
or

    5
   / \
  4   6
 /
2

/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param root: The root of the binary search tree.
     * @param value: Remove the node with given value.
     * @return: The root of the binary search tree after removal.
     */
    TreeNode* removeNode(TreeNode* root, int value) {
        // write your code here
        //find the node,
        //if node has right subtree, find the left most node in right subtree
        //else let node = node->left
        
        if(root == NULL) return root;
        
        TreeNode dummy(0);
        dummy.left = root;
        
        TreeNode* parent = findparent(&dummy, root, value);
        TreeNode* node = NULL;
        if(parent->left != NULL && parent->left->val == value)
        {
            node = parent->left;
        }
        else if(parent->right != NULL && parent->right->val == value)
        {
            node = parent->right;
        }
        else 
        {
            return dummy.left;
        }
        
        //node delete node
        deleteNode(parent, node);
        
        return dummy.left;
    }
    
    
    TreeNode* findparent(TreeNode* parent, TreeNode* node, int value)
    {
        if(node == NULL) return parent;
        
        if(node->val > value)
        {
            return findparent(node, node->left, value);
        }
        else if(node->val < value)
        {
            return findparent(node, node->right, value);
        }
        else
        {
            return parent;
        }
    }
    
    //if node->right == NULL, parent->left = node->left
    //else find the left most node in node->right
    void deleteNode(TreeNode* parent, TreeNode* node)
    {
        if(node->right == NULL)
        {
            if(parent->left == node)
            {
                parent->left = node->left;
            }
            else
            {
                parent->right = node->left;
            }
        }
        else
        {
            //find left most node in node->right and its parent
            TreeNode* cur = node->right;
            TreeNode* father = node;
            
            while(cur->left != NULL)
            {
                father = cur;
                cur = cur->left;
            }
            
            if(father->left == cur)
            {
                father->left = cur->right;
            }
            else
            {
                //this means father == node, cur == node->right
                father->right = cur->right;
            }
            
            //now replace node with cur
            if(parent->left == node)
            {
                parent->left = cur;
            }
            else
            {
                parent->right = cur;
            }
            
            cur->left = node->left;
            cur->right = node->right;
        }
    }
};
