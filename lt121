Word Ladder II

 Description
 Notes
 Testcase
 Judge
Given two words (start and end), and a dictionary, find all shortest transformation sequence(s) from start to end, such that:

Only one letter can be changed at a time
Each intermediate word must exist in the dictionary
 Notice

All words have the same length.
All words contain only lowercase alphabetic characters.
Have you met this question in a real interview? Yes
Example
Given:
start = "hit"
end = "cog"
dict = ["hot","dot","dog","lot","log"]
Return
  [
    ["hit","hot","dot","dog","cog"],
    ["hit","hot","lot","log","cog"]
  ]


class Solution {
public:
    /**
      * @param start, a string
      * @param end, a string
      * @param dict, a set of string
      * @return a list of lists of string
      */
      
    vector<vector<string>> findLadders(string start, string end, unordered_set<string> &dict) {
        // write your code here
        
        //construct a graph from start to end, bfs
        //then trace back from end to start
        
        //first bfs
        dict.insert(end);
        dict.insert(start);

        unordered_set<string> visited;
        visited.insert(start);
        
        unordered_map<string, vector<string>> graph;
        unordered_map<string, int> distance;
        
        bfs(start, end, dict, graph, distance);
        
        //start from end
        vector<string> sol;
        vector<vector<string>> res;
        dfs(start, end, graph, distance, sol, res);
        
        return res;
        
    }
    
    //这里需要注意sol不能pass by reference,因为最后的sol.pop_back()没有执行就return了
    void dfs(string start, string end, unordered_map<string, vector<string>>& graph,unordered_map<string, int>& distance, vector<string> sol, vector<vector<string>>& res)
    {
        sol.push_back(end);
        if(start == end)
        {
            reverse(sol.begin(), sol.end());
            res.push_back(sol);
            return;
        }

        for(auto node : graph[end])
        {
            if(distance.find(node) != distance.end() && distance[node]+1 == distance[end])
            {
                dfs(start, node, graph, distance, sol, res);
            }
        }
        
        sol.pop_back();
        
        
        
    }
    
    
    void bfs(string start, string end, unordered_set<string>& dict, unordered_map<string, vector<string>>& graph, unordered_map<string, int>& distance)
    {
        queue<string> q;
        q.push(start);
        distance[start] = 0;
        
        int wl = start.length();
        
        while(!q.empty())
        {
            string cur = q.front();
            q.pop();
            
            string next =cur;
            for(int i = 0; i < wl; i++)
            {
                char c = next[i];
                for(int j = 0; j < 26; j++)
                {
                    if(c == 'a' + j) continue;
                    
                    next[i] = 'a' + j;
                    
                    if(dict.find(next) == dict.end()) continue;
                    //这里注意即使next已经visit过了，graph里还是要再存一遍
                    //因为这里到同一个next的路径可能有很多种
                    graph[next].push_back(cur);
                    //cout << "cur=" << cur << "next=" << next << endl;
                    if(distance.find(next) != distance.end()) continue;
                    
                    //distance只存最开始碰到的，即distance最小的时候
                    distance[next] = distance[cur]+1;
                    //cout << "cur=" << cur << "next=" << next << endl;
                    q.push(next);
                }
                next[i] = c;
            }
            
        }
        
    }
};
