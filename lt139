Subarray Sum Closest

 Description
 Notes
 Testcase
 Judge
Given an integer array, find a subarray with sum closest to zero. Return the indexes of the first number and last number.

Have you met this question in a real interview? Yes
Example
Given [-3, 1, 1, -3, 5], return [0, 2], [1, 3], [1, 1], [2, 2] or [0, 4].




class Solution {
public:
    /**
     * @param nums: A list of integers
     * @return: A list of integers includes the index of the first number 
     *          and the index of the last number
     */
    class Comparator
    {
    public:
        bool operator()(const pair<int, int>& a, const pair<int, int>& b)
        {
            return a.first < b.first;
        }
    };
    vector<int> subarraySumClosest(vector<int> nums){
        // write your code here
        
        if(nums.empty()) return vector<int>();
        
        int n = nums.size();
        
        //first is sum, second is index
        vector<pair<int, int>> partialSum;
        partialSum.push_back(make_pair(0, 0));
        
        int sum = 0;
        for(int i = 1; i <= n; i++)
        {
            sum += nums[i-1];
            partialSum.push_back(make_pair(sum,i));
        }
        
        sort(partialSum.begin(), partialSum.end(), Comparator());
        
        int minDiff = INT_MAX;
        vector<int> res(2, 0);
        for(int i = 1; i <=n; i++)
        {
            int diff = partialSum[i].first - partialSum[i-1].first;
            
            if(minDiff > diff)
            {
                minDiff = diff;
                res[0] = min(partialSum[i].second, partialSum[i-1].second);
                res[1] = max(partialSum[i].second, partialSum[i-1].second)-1;
            }
        }
        
        return res;
    }
};
