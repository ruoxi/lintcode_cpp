Data Stream Median 
Numbers keep coming, return the median of numbers at every time a new number added.

Clarification 

What's the definition of Median?
 - Median is the number that in the middle of a sorted array. If there are n numbers in a sorted array A, the median is A[(n - 1) / 2]. For example, if A=[1,2,3], median is 2. If A=[1,19], median is 1.

Example 

For numbers coming list: [1, 2, 3, 4, 5], return [1, 1, 2, 2, 3].

For numbers coming list: [4, 5, 1, 3, 2, 6, 0], return [4, 4, 4, 3, 3, 3, 3].

For numbers coming list: [2, 20, 100], return [2, 2, 20].




class Solution {
public:
    /**
     * @param nums: A list of integers.
     * @return: The median of numbers
     */
     //use minheap to keep nums >= median
     //use maxheap to kepp nums < median
     //here there is no need to delete anything
     //so just use priority_queue is enough
    vector<int> medianII(vector<int> &nums) {
        // write your code here
        
        if(nums.empty()) return vector<int>();
        int n = nums.size();
        
        priority_queue<int, vector<int>, greater<int>> minheap;
        priority_queue<int, vector<int>, less<int>> maxheap;
        int median = nums[0];
        
        vector<int> res;
        
        for(int i = 0; i < n; i++)
        {
            if(i > 0)
            {
                if(nums[i] < median)
                {
                    maxheap.push(nums[i]);
                }
                else
                {
                    minheap.push(nums[i]);
                }
                
            }
            
            //check if balanced
            while(maxheap.size() > minheap.size())
            {
                minheap.push(median);
                median = maxheap.top();
                maxheap.pop();
            }
            
            while(maxheap.size() + 1 < minheap.size())
            {
                maxheap.push(median);
                median = minheap.top();
                minheap.pop();
            }
            
            res.push_back(median);
        }
        
        return res;
    }
};
