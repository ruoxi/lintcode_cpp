Binary Search Tree Iterator
Design an iterator over a binary search tree with the following rules:

Elements are visited in ascending order (i.e. an in-order traversal)
next() and hasNext() queries run in O(1) time in average.
Have you met this question in a real interview? Yes
Example
For the following binary search tree, in-order traversal by using iterator is [1, 6, 10, 11, 12]

   10
 /    \
1      11
 \       \
  6       12

/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 * Example of iterate a tree:
 * BSTIterator iterator = BSTIterator(root);
 * while (iterator.hasNext()) {
 *    TreeNode * node = iterator.next();
 *    do something for node
 */
 
 //inorder traversal iteratively
 
class BSTIterator {
public:
    //@param root: The root of binary tree.
    BSTIterator(TreeNode *root) {
        // write your code here
        /*while(!stk.empty())
        {
            stk.pop();
        }*/
        cur = root;
    }

    //@return: True if there has next node, or false
    bool hasNext() {
        // write your code here

        return (!stk.empty() || cur != NULL);
    }
    
    //@return: return next node
    TreeNode* next() {
        // write your code here
        while(cur != NULL)
        {
            stk.push(cur);
            cur = cur->left;
        }
        
        cur = stk.top(); 

        stk.pop();
        TreeNode* next = cur;
        cur = cur->right;
        return next;
    }
    
    stack<TreeNode*> stk;
    TreeNode* cur;
};
