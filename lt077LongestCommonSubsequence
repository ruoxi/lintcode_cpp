Longest Common Subsequence

 Description
 Notes
 Testcase
 Judge
Given two strings, find the longest common subsequence (LCS).

Your code should return the length of LCS.

Have you met this question in a real interview? Yes
Clarification
What's the definition of Longest Common Subsequence?

https://en.wikipedia.org/wiki/Longest_common_subsequence_problem
http://baike.baidu.com/view/2020307.htm
Example
For "ABCD" and "EDCA", the LCS is "A" (or "D", "C"), return 1.

For "ABCD" and "EACB", the LCS is "AC", return 2.
class Solution {
public:
    /**
     * @param A, B: Two strings.
     * @return: The length of longest common subsequence of A and B.
     */
    //state: dp[i][j]表示A[0..i-1]和B[0..j-1]的LCS
    //function: dp[i][j] = max(dp[i-1][j-1]+1, dp[i-1][j], dp[i][j-1]) if A[i-1] == B[j-1]
    //  = max(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) if A[i-1] != B[j-1]
    //initialization: dp[i][0] = 0; dp[0][j] = 0
    int longestCommonSubsequence(string A, string B) {
        // write your code here
        if(A.empty() || B.empty()) return 0;
        
        int n = A.length();
        int m = B.length();
        
        vector<vector<int>> dp(2, vector<int>(m+1, 0));
        
        for(int i = 1; i<=n; i++)
        {
            for(int j = 1; j <=m; j++)
            {
                dp[i%2][j] = max(dp[(i-1)%2][j], max(dp[i%2][j-1], dp[(i-1)%2][j-1]));
                if(A[i-1] == B[j-1])
                {
                    dp[i%2][j] = max(dp[(i-1)%2][j-1]+1, dp[i%2][j]);
                }
            }
        }
        
        return dp[n%2][m];
    }
};
