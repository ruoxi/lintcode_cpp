Coins in a Line III

 Description
 Notes
 Testcase
 Judge
There are n coins in a line. Two players take turns to take a coin from one of the ends of the line until there are no more coins left. The player with the larger amount of money wins.

Could you please decide the first player will win or lose?

Have you met this question in a real interview? Yes
Example
Given array A = [3,2,2], return true.

Given array A = [1,2,4], return true.

Given array A = [1,20,4], return false.


class Solution {
public:
    /**
     * @param values: a vector of integers
     * @return: a boolean which equals to true if the first player will win
     */
     
    //state: dp[i][j]表示还剩values[i...j]，max coins first player can get
    //function: dp[i][j] = max(sum[i][j] - dp[i-1][j], sum[i][j] - dp[i][j-1])
    //initialization: dp[i][i] = values[i]
    //                dp[i][i+1] = max(values[i], values[i+1])
    bool firstWillWin(vector<int> &values) {
        // write your code here
        if(values.empty()) return true;
        
        int n = values.size();
        
        //sum[i] means sum from values[0...i-1]
        vector<int> sum(n+1, 0);
        int total = 0;
        
        for(int i = 1; i <=n; i++)
        {
            sum[i] += sum[i-1] + values[i-1];
            total += values[i-1];
        }
        
        //dp[i][j]means with values[i...j] left, how many coins can first player get
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for(int i = 0; i <n; i++)
        {
            dp[i][i] = values[i];
            if(i+1 < n)
            {
                dp[i][i+1] = max(values[i], values[i+1]);
            }
            
        }
        
        for(int len = 2; len <n; len++)
        {
            for(int i = 0; i < n && i+len < n; i++)
            {
                int j = i+ len;
                
                int take_left = sum[j+1] - sum[i] -dp[i+1][j];
                int take_right = sum[j+1] - sum[i] - dp[i][j-1];
                dp[i][j] = max(take_left, take_right);
            }
        }
        
        return dp[0][n-1] > total/2;;
        
        
        
        
    }
};
