Maximum Subarray II

 Description
 Notes
 Testcase
 Judge
Given an array of integers, find two non-overlapping subarrays which have the largest sum.
The number in each subarray should be contiguous.
Return the largest sum.

 Notice

The subarray should contain at least one number

Have you met this question in a real interview? Yes
Example
For given [1, 3, -1, 2, -1, 2], the two subarrays are [1, 3] and [2, -1, 2] or [1, 3, -1, 2] and [2], they both have the largest sum 7.


class Solution {
public:
    /**
     * @param nums: A list of integers
     * @return: An integer denotes the sum of max two non-overlapping subarrays
     */
    int maxTwoSubArrays(vector<int> nums) {
        // write your code here
        
        
        //算出以i 为分割线，分割线左边的max,和分割线右边的max
        int n = nums.size();
        vector<int> left_sum(n, 0);
        int minSum = 0;
        int sum = 0;
        int maxSum = INT_MIN;
        for(int i = 0; i < n; i++)
        {
            sum += nums[i];
            maxSum = max(maxSum, sum-minSum);
            minSum = min(minSum, sum);
            left_sum[i] = maxSum;
        }
        
        vector<int> right_sum(n+1, 0);
        minSum = 0;
        sum = 0; 
        maxSum = INT_MIN;
        for(int i = n-1; i>=0; i--)
        {
            sum += nums[i];
            maxSum = max(maxSum, sum-minSum);
            minSum = min(minSum, sum);
            right_sum[i] = maxSum;
        }
        
        int res = INT_MIN;
        for(int i = 0; i < n-1; i++)
        {
            res = max(res, left_sum[i] + right_sum[i+1]);
        }
        
        return res;
    }
};
