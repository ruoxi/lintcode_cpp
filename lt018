Subsets II

 Description
 Notes
 Testcase
 Judge
Given a list of numbers that may has duplicate numbers, return all possible subsets

 Notice

Each element in a subset must be in non-descending order.
The ordering between two subsets is free.
The solution set must not contain duplicate subsets.
Have you met this question in a real interview? Yes
Example
If S = [1,2,2], a solution is:

[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]



class Solution {
public:
    /**
     * @param S: A set of numbers.
     * @return: A list of lists. All valid subsets.
     */
    vector<vector<int> > subsetsWithDup(const vector<int> &S) {
        // write your code here
        
        if(S.empty()) return vector<vector<int>>();
        
        int n = S.size();
        vector<int> nums;
        for(int i = 0; i < n; i++)
        {
            nums.push_back(S[i]);
        }
        
        sort(nums.begin(), nums.end());

        vector<int> sol;
        vector<vector<int>> res;
        dfs(nums, 0, sol, res);
        return res;
    }
    
    void dfs(vector<int>& S, int idx, vector<int>& sol, vector<vector<int>>& res)
    {
        res.push_back(sol);
        
        for(int i = idx; i < S.size(); i++)
        {
            if(i > idx && S[i] == S[i-1] ) continue;
            
            sol.push_back(S[i]);
            dfs(S, i+1,sol, res);
            sol.pop_back();
        }
    }
};
