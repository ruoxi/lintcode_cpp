4Sum

 Description
 Notes
 Testcase
 Judge
Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target?

Find all unique quadruplets in the array which gives the sum of target.

 Notice

Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ≤ b ≤ c ≤ d)
The solution set must not contain duplicate quadruplets.

Have you met this question in a real interview? Yes
Example
Given array S = {1 0 -1 0 -2 2}, and target = 0. A solution set is:

(-1, 0, 0, 1)
(-2, -1, 1, 2)
(-2, 0, 0, 2)


class Solution {
public:
    /**
     * @param numbers: Give an array numbersbers of n integer
     * @param target: you need to find four elements that's sum of target
     * @return: Find all unique quadruplets in the array which gives the sum of 
     *          zero.
     */
    vector<vector<int> > fourSum(vector<int> nums, int target) {
        // write your code here
        
        if(nums.size() < 4) return vector<vector<int>>();
        sort(nums.begin(), nums.end());
        int n = nums.size();
        vector<vector<int>> res;
        
        for(int i = 0 ; i < n; i++)
        {
            if(i >0 && nums[i] == nums[i-1]) continue;
            for(int j = i+1; j < n; j++)
            {
                if(j > i+1 && nums[j] == nums[j-1]) continue;
                int left = j+1, right = n-1;
                
                while(left < right)
                {
                    int sum = nums[i] + nums[j] + nums[left]+nums[right];
                    
                    if(sum == target)
                    {
                        res.push_back({nums[i], nums[j], nums[left], nums[right]});
                        left++;
                        right--;
                        
                        while(left<right && nums[left] == nums[left-1]) left++;
                        while(left<right && nums[right] == nums[right+1]) right--;
                    }
                    else if(sum < target)
                    {
                        left++;
                    }
                    else
                    {
                        right--;
                    }
                }
                
            }
        }
        
        return res;
    }
};
