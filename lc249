Count of Smaller Number before itself

 Description
 Notes
 Testcase
 Judge
Give you an integer array (index from 0 to n-1, where n is the size of this array, value from 0 to 10000) . For each element Ai in the array, count the number of element before this element Ai is smaller than it and return count number array.

 Notice

We suggest you finish problem Segment Tree Build, Segment Tree Query II and Count of Smaller Number before itself I first.

Have you met this question in a real interview? Yes
Example
For array [1,2,7,8,5], return [0,1,2,3,2]


class Solution {
public:
   /**
     * @param A: An integer array
     * @return: Count the number of element before this element 'ai' is 
     *          smaller than it and return count number array
     */
     
    class SegmentTreeNode
    {
    public:
        int start;
        int end;
        int cnt;
        SegmentTreeNode* left;
        SegmentTreeNode* right;
        SegmentTreeNode(int s, int e, int c)
        :start(s),end(e),cnt(c),left(NULL),right(NULL) {}
    };
    
    
    vector<int> countOfSmallerNumberII(vector<int> &A) {
        // write your code here
        
        if(A.empty()) return vector<int>();
        
        int n = A.size();
        
        //find the min and max in array which will be the start and end
        //range in segment tree
        int start  = 10000; 
        int end = 0;
        
        for(int i = 0; i < n; i++)
        {
            start = min(start, A[i]);
            end = max(end, A[i]);
        }
        
        //build segment tree based on start and end 
        SegmentTreeNode* root = buildSegmentTree(start, end);
        //cout << "done build tree\n";
        vector<int> res;
        //get number of nodes smaller than A[i] and update the segment tree
        for(int i = 0; i < n; i++)
        {
            int q = query(root, 0, A[i]-1);
            //cout << "query i=" << i<< endl;
            res.push_back(q);
            update(root, A[i]);
        }
        
        return res;
    }
    
    void update(SegmentTreeNode* root, int val)
    {
        if(root == NULL) return;
        
        //no overlap
        if(root->start > val || root->end < val)
        {
            return;
        }
        
        //total overlap
        if(root->start == val && root->end == val)
        {
            root->cnt++;
            return;
        }
        
        //partial overlap
        update(root->left, val);
        update(root->right, val);
        root->cnt = root->left->cnt + root->right->cnt;
    }
    
    int query(SegmentTreeNode* root, int qstart, int qend)
    {
        if(root == NULL) return 0;
        
        //no overlap
        if(root->start > qend || root->end < qstart)
        {
            return 0;
        }
        
        //total overlap
        if(qstart <= root->start && qend >= root->end)
        {
            return root->cnt;
        }
        
        //partial overlap
        int left = query(root->left, qstart, qend);
        int right = query(root->right, qstart, qend);
        return left+right;
    }
    
    
    SegmentTreeNode* buildSegmentTree(int start, int end)
    {
        if(start > end) return NULL;
        
        if(start == end)
        {
            return new SegmentTreeNode(start, end, 0);
        }
        
        int mid = start + (end - start)/2;
        SegmentTreeNode* left = buildSegmentTree(start, mid);
        SegmentTreeNode* right = buildSegmentTree(mid+1, end);
        
        SegmentTreeNode* node = new SegmentTreeNode(start, end, 0);
        node->left = left;
        node->right = right;
        return node;
        
    }
};
