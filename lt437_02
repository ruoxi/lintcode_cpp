Copy Books

 Description
 Notes
 Testcase
 Judge
Given n books and the ith book has A[i] pages. You are given k people to copy the n books.

n books list in a row and each person can claim a continous range of the n books. For example one copier can copy the books from ith to jth continously, but he can not copy the 1st book, 2nd book and 4th book (without 3rd book).

They start copying books at the same time and they all cost 1 minute to copy 1 page of a book. What's the best strategy to assign books so that the slowest copier can finish at earliest time?

Have you met this question in a real interview? Yes
Example
Given array A = [3,2,4], k = 2.

Return 5( First person spends 5 minutes to copy book 1 and book 2 and second person spends 4 minutes to copy book 3. )


class Solution {
public:
    /**
     * @param pages: a vector of integers
     * @param k: an integer
     * @return: an integer
     */
     
    //Binary search, books will be separated into several groups
    //our gols is to find the min number of pages that can be assigned to each person,
    //the lower bound is the max page in pages, the upper bound is the total pages
    int copyBooks(vector<int> &pages, int k) {
        // write your code here
        if(pages.empty()) return 0;
        
        int n = pages.size();
        
        int maxPage = 0;
        int total = 0;
        for(int i = 0; i < n; i++)
        {
            total+=pages[i];
            maxPage = max(maxPage, pages[i]);
        }
        
        //在maxPage和total page上做二分
        int start = maxPage, end = total;
        
        //找到第一个能被k个人copy完的最小页数
        while(start +1 < end)
        {
            //每个人最多copy mid页
            int mid = start + (end-start)/2;
            
            //means number of people needed <=k
            if(isValid(pages, k, mid))
            {
                end = mid;
            }
            else
            {
                start = mid;
            }
        }

        if(isValid(pages, k, start)) return start;
        return end;
    }
    
    bool isValid(vector<int>& pages, int k, int limit)
    {
        
        int count = 0;
        int prev = 0;
        for(int i = 0 ; i < pages.size(); i++)
        {
            if(prev + pages[i] > limit)
            {
                count++;
                
                if(count > k) return false;
                prev = 0;
            }

            prev += pages[i];

        }
        
        if(prev >0) count++;
        
        if(count <=k) return true;
        return false;
        
    }
};
