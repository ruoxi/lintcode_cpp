Given n nodes in a graph labeled from 1 to n. There is no edges in the graph at beginning.

You need to support the following method:
1. connect(a, b), add an edge to connect node a and node b. 2.query(a, b)`, check if two nodes are connected

Have you met this question in a real interview? Yes
Example
5 // n = 5
query(1, 2) return false
connect(1, 2)
query(1, 3) return false
connect(2, 4)
query(1, 4) return true


class ConnectingGraph {
public:
    ConnectingGraph(int n) {
        // initialize your data structure here.
        father.assign(n+1, 0);
        
        for(int i = 1; i <=n; i++)
        {
            father[i] = i;
        }
    }
        
    void  connect(int a, int b) {
        // Write your code here
        int root_a = find(a);
        int root_b = find(b);
        
        if(root_a != root_b)
        {
            father[root_a] = root_b;
        }
    }

    bool query(int a, int b) {
        // Write your code here
        int root_a = find(a);
        int root_b = find(b);
        return root_a == root_b;
    }
    
    int find(int a)
    {
        int pa = father[a];
        while(pa != father[pa])
        {
            pa = father[pa];
        }
        
        //compress
        int root = pa;
        pa = a;
        while(pa != father[pa])
        {
            int tmp = father[pa];
            father[pa] = root;
            pa = tmp;
        }
        return root;
    }
    
private:
    vector<int> father;
    
};
