Binary Tree Path Sum
Given a binary tree, find all paths that sum of the nodes in the path equals to a given number target.

A valid path is from root node to any of the leaf nodes.

Have you met this question in a real interview? Yes
Example
Given a binary tree, and target = 5:

     1
    / \
   2   4
  / \
 2   3
return

[
  [1, 2, 2],
  [1, 4]
]
/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param root the root of binary tree
     * @param target an integer
     * @return all valid paths
     */
    vector<vector<int>> binaryTreePathSum(TreeNode *root, int target) {
        // Write your code here
        vector<vector<int>> res;
        vector<int> sol;
        if(root == NULL ) return res;
        
        helper(root, target, res, sol);
        
        return res;
    }
    
    
    void helper(TreeNode* root, int target, vector<vector<int>>& res, vector<int>& sol)
    {
        if(root == NULL) return;
        sol.push_back(root->val);
        
        if(root->left == NULL && root->right == NULL && root->val == target)
        {
            res.push_back(sol);
        }
        

        helper(root->left, target-root->val, res, sol);
        helper(root->right, target-root->val, res, sol);
        sol.pop_back();
    }
};
