Number of Islands II

Given a n,m which means the row and column of the 2D matrix and an array of pair A( size k). Originally, the 2D matrix is all 0 which means there is only sea in the matrix. The list pair has k operator and each operator has two integer A[i].x, A[i].y means that you can change the grid matrix[A[i].x][A[i].y] from sea to island. Return how many island are there in the matrix after each operator.

 Notice

0 is represented as the sea, 1 is represented as the island. If two 1 is adjacent, we consider them in the same island. We only consider up/down/left/right adjacent.

Have you met this question in a real interview? Yes
Example
Given n = 3, m = 3, array of pair A = [(0,0),(0,1),(2,2),(2,1)].

return [1,1,2,2].




/**
 * Definition for a point.
 * struct Point {
 *     int x;
 *     int y;
 *     Point() : x(0), y(0) {}
 *     Point(int a, int b) : x(a), y(b) {}
 * };
 */
class Solution {
public:
    /**
     * @param n an integer
     * @param m an integer
     * @param operators an array of point
     * @return an integer array
     */
     
    vector<int> dx = {1, -1, 0, 0};
    vector<int> dy = {0, 0, 1, -1};
    vector<int> numIslands2(int n, int m, vector<Point>& operators) {
        // Write your code here
        
        //number of island increase when change from sea to island
        //and decrease when merge island
        
        if(operators.empty()) return vector<int>();
        
        int size = operators.size();
        
        unordered_map<int, int> father;
        int cnt = 0;
        vector<int> res;
        
        for(int i = 0; i < size; i++)
        {
            int x = operators[i].x;
            int y = operators[i].y;
            
            int index = x*m+y;
            father[index] = index;
            cnt++;
            
            //check if merge
            for(int j = 0; j < 4; j++)
            {
                int nx = x + dx[j];
                int ny = y + dy[j];
                int next_index = nx*m+ny;
                
                if(nx >=0 && nx < n && ny >=0 && ny < m && father.find(next_index) != father.end())
                {
                    int root_cur = find(index, father);
                    int root_next = find(next_index, father);
                    
                    if(root_cur != root_next)
                    {
                        father[root_next] = root_cur;
                        cnt--;
                    }
                }
            }
            res.push_back(cnt);
            
        }
        
        return res;
    }
    
    int find(int x, unordered_map<int, int>& father)
    {
        int px = father[x];
        while(px != father[px])
        {
            px = father[px];
        }
        
        int root = px;
        px = x;
        while(px != father[px])
        {
            int tmp = father[px];
            father[px] = root;
            px = tmp;
        }
        
        return root;
    }
};
