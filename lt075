Find Peak Element

 Description
 Notes
 Testcase
 Judge
There is an integer array which has the following features:

The numbers in adjacent positions are different.
A[0] < A[1] && A[A.length - 2] > A[A.length - 1].
We define a position P is a peek if:

A[P] > A[P-1] && A[P] > A[P+1]
Find a peak element in this array. Return the index of the peak.

 Notice

The array may contains multiple peeks, find any of them.

Have you met this question in a real interview? Yes
Example
Given [1, 2, 1, 3, 4, 5, 7, 6]

Return index 1 (which is number 2) or 6 (which is number 7)


class Solution {
public:
    /**
     * @param A: An integers array.
     * @return: return any of peek positions.
     */
    int findPeak(vector<int> A) {
        // write your code here
        
        //make sure max number is not in left and right
        
        int start = 1;
        int end = A.size()-2;
        
        while(start + 1  < end)
        {
            int mid = start + (end - start)/2;
            
            if(A[mid] > A[mid-1] && A[mid] > A[mid+1])
            {
                return mid;
            }
            else if(A[mid] < A[mid-1]) //左边有最大值
            {
                end = mid-1;
            }
            else
            {
                start = mid+1;
            }
        }
        
        if(A[start] > A[end]) return start;
        return end;
    }
};
