Maximum Subarray Difference

 Description
 Notes
 Testcase
 Judge
Given an array with integers.

Find two non-overlapping subarrays A and B, which |SUM(A) - SUM(B)| is the largest.

Return the largest difference.

 Notice

The subarray should contain at least one number

Have you met this question in a real interview? Yes
Example
For [1, 2, -3, 1], return 6.


class Solution {
public:
    /**
     * @param nums: A list of integers
     * @return: An integer indicate the value of maximum difference between two
     *          Subarrays
     */
    //要保证SUM[a]-sum[b]是最大，相当于在找max subarray sum
    //和min subarray sum, 
    //state: maxSumForward[i]表示nums[0...i]中的max subarray sum
    //       minSumForwrad[i]表示nums[0...i]中的min subarray sum
    //       maxSumBackward[i]表示nums[i...n-1]中的max subarray sum
    //       minSumBackward[i]表示nums[i...n-1]中的min subarray sum
    //function: maxSumForward[i] = max(maxSumDp[i-1], sum-minSum);
    //          minSumForwrad[i] = min(minSumDp[i-1], sum-maxSum);
    int maxDiffSubArrays(vector<int> nums) {
        // write your code here
        
        if(nums.empty()) return 0;
        
        int n = nums.size();
        vector<int> maxSumForward(n, 0);
        vector<int> minSumForward(n, 0);
        vector<int> maxSumBackward(n, 0);
        vector<int> minSumBackward(n, 0);
        
        int maxSum = 0;
        int minSum = 0;

        int sum = 0;
        int maxV = INT_MIN;
        int minV = INT_MAX;
        for(int i = 0; i < n; i++)
        {
            sum += nums[i];
            
            maxV = max(maxV, sum - minSum);
            maxSumForward[i] = maxV;
            minSum = min(minSum, sum);
            
            minV = min(minV, sum-maxSum);
            minSumForward[i] = minV;
            maxSum = max(maxSum, sum);
        }
        
        //backward
        maxSum = 0;
        minSum = 0;
        sum = 0;
        maxV = INT_MIN;
        minV = INT_MAX;
        
        for(int i = n-1; i >=0; i--)
        {
            sum += nums[i];
            maxV = max(maxV, sum-minSum);
            maxSumBackward[i] = maxV;
            minSum = min(minSum, sum);
            
            minV = min(minV, sum-maxSum);
            minSumBackward[i] = minV;
            maxSum = max(maxSum, sum);
        }
        
        //check the max diff
        int res = INT_MIN;
        for(int i = 0; i < n-1; i++)
        {
            res = max(res, abs(maxSumForward[i] - minSumBackward[i+1]));
        }
        
        for(int i = 0; i < n-1; i++)
        {
            res = max(res,abs(maxSumBackward[i+1]- minSumForward[i]));
        }
        
        return res;
        
        
        
    }
};
