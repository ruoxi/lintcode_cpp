Permutations

 Description
 Notes
 Testcase
 Judge
Given a list of numbers, return all possible permutations.

 Notice

You can assume that there is no duplicate numbers in the list.

Have you met this question in a real interview? Yes
Example
For nums = [1,2,3], the permutations are:

[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]



class Solution {
public:
    /**
     * @param nums: A list of integers.
     * @return: A list of permutations.
     */
    vector<vector<int> > permute(vector<int> nums) {
        // write your code here
        

        int n = nums.size();
        
        vector<bool> visited(n, false);
        vector<int> sol;
        vector<vector<int>> res;
        
        dfs(nums, visited, sol, res);
        return res;
    }
    
    void dfs(vector<int>& nums, vector<bool>& visited, vector<int>& sol, vector<vector<int>>& res)
    {
        if(sol.size() == nums.size())
        {
            res.push_back(sol);
            return;
        }
        
        for(int i = 0; i < nums.size(); i++)
        {
            if(visited[i]) continue;
            
            visited[i] = true;
            sol.push_back(nums[i]);
            dfs(nums, visited, sol, res);
            visited[i] = false;
            sol.pop_back();
        }
    }
};
