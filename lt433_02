Given a boolean 2D matrix, find the number of islands.

 Notice

0 is represented as the sea, 1 is represented as the island. If two 1 is adjacent, we consider them in the same island. We only consider up/down/left/right adjacent.

Have you met this question in a real interview? Yes
Example
Given graph:

[
  [1, 1, 0, 0, 0],
  [0, 1, 0, 0, 1],
  [0, 0, 0, 1, 1],
  [0, 0, 0, 0, 0],
  [0, 0, 0, 0, 1]
]
return 3.



class Solution {
public:
    /**
     * @param grid a boolean 2D matrix
     * @return an integer
     */
     
    vector<int> father;
    int cnt;
    int numIslands(vector<vector<bool>>& grid) {
        // Write your code here
        if(grid.empty() || grid.at(0).empty()) return 0;
        
        int n = grid.size();
        int m = grid.at(0).size();
        
        int k = n*m;
        
        father.assign(k, 0);
        cnt = 0;
        for(int i = 0; i <n; i++)
        {
            for(int j = 0; j <m; j++)
            {
                if(grid[i][j])
                {
                    father[i*m + j] = i*m+j;
                    cnt++;
                }
            }
        }
        
        //每次只需要向右和向下看
        for(int i = 0; i <n; i++)
        {
            for(int j = 0; j <m; j++)
            {
                if(grid[i][j])
                {
                    if(i+1 < n && grid[i+1][j])
                    {
                        _union(i*m+j, (i+1)*m+j);
                    }
                    
                    if(j+1 < m && grid[i][j+1])
                    {
                        _union(i*m+j, i*m+j+1);
                    }
                }
            }
        }
        
        return cnt;
        
    }
    
    void _union(int a, int b)
    {
        int pa = find(a);
        int pb = find(b);
        
        if(pa != pb)
        {
            father[pb] = pa;
            cnt--;
        }
    }
    
    int find(int a)
    {
        int pa = father[a];
        while(pa != father[pa])
        {
            pa = father[pa];
        }
        
        //now find the boss, compress
        int root = pa;
        pa = a;
        while(root != father[pa])
        {
            int tmp = father[pa];
            father[pa] = root;
            pa = tmp;
        }
        
        return root;
    }
};
