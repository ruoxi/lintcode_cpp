Interval Sum II

 Description
 Notes
 Testcase
 Judge
Given an integer array in the construct method, implement two methods query(start, end) and modify(index, value):

For query(start, end), return the sum from index start to index end in the given array.
For modify(index, value), modify the number in the given index to value
 Notice

We suggest you finish problem Segment Tree Build, Segment Tree Query and Segment Tree Modify first.

Have you met this question in a real interview? Yes
Example
Given array A = [1,2,7,8,5].

query(0, 2), return 10.
modify(0, 4), change A[0] from 1 to 4.
query(0, 1), return 6.
modify(2, 1), change A[2] from 7 to 1.
query(2, 4), return 14.


class Solution {
public:
    /* you may need to use some attributes here */
    class SegmentTreeNode
    {
    public:
        int start;
        int end;
        long long sum;
        SegmentTreeNode* left;
        SegmentTreeNode* right;
        SegmentTreeNode(int s, int e, long long val)
        :start(s),end(e),sum(val),left(NULL),right(NULL) {}
    };

    SegmentTreeNode* root;
    /**
     * @param A: An integer vector
     */
    Solution(vector<int> A) {
        // write your code here
        if(A.empty()) return;
        int n = A.size();
        
        root= buildSegmentTree(A, 0, n-1);
        
        
    }
    
    
    SegmentTreeNode* buildSegmentTree(vector<int>& A, int start, int end)
    {
        if(start > end) return NULL;
        
        if(start == end)
        {
            return new SegmentTreeNode(start, end, (long long)A[start]);
        }
        
        int mid = start + (end - start)/2;
        SegmentTreeNode* left = buildSegmentTree(A, start, mid);
        SegmentTreeNode* right = buildSegmentTree(A, mid+1, end);
        
        SegmentTreeNode* node = new SegmentTreeNode(start, end, left->sum + right->sum);
        
        node->left = left;
        node->right = right;
        return node;
    }
    /**
     * @param start, end: Indices
     * @return: The sum from start to end
     */
    long long query(int start, int end) {
        // write your code here
        if(root == NULL) return 0;
        
        SegmentTreeNode* cur = root;
        return queryRange(cur, start, end);
    }
    
    long long queryRange(SegmentTreeNode* node, int qstart, int qend)
    {
        if(node == NULL || qstart > qend) return 0;
        
        //no overlap
        if(node->start > qend || node->end < qstart)
        {
            return 0;
        }
        
        //total overlap
        if(qstart <= node->start && qend >= node->end)
        {
            return node->sum;
        }
        
        //patial overlap
        long long left = queryRange(node->left, qstart, qend);
        long long right = queryRange(node->right, qstart, qend);
        return left+right;
    }
    /**
     * @param index, value: modify A[index] to value.
     */
    void modify(int index, int value) {
        // write your code here
        if(root == NULL) return;
        

        SegmentTreeNode* cur = root;
        
        update(cur, index,value);
    }
    
    void update(SegmentTreeNode* node, int index, int value)
    {
        if(node == NULL) return;
        
        //no overlap
        if(node->end < index || node->start > index)
        {
            return;
        }
        
        //total overlap
        if(node->start == index && node->end == index)
        {
            node->sum = (long)value;
            return;
        }
        
        update(node->left, index, value);
        update(node->right, index, value);
        
        node->sum = node->left->sum + node->right->sum;
        
    }
};
