Interval Minimum Number

 Description
 Notes
 Testcase
 Judge
Given an integer array (index from 0 to n-1, where n is the size of this array), and an query list. Each query has two integers [start, end]. For each query, calculate the minimum number between index start and end in the given array, return the result list.

 Notice

We suggest you finish problem Segment Tree Build, Segment Tree Query and Segment Tree Modify first.

Have you met this question in a real interview? Yes
Example
For array [1,2,7,8,5], and queries [(1,2),(0,4),(2,4)], return [2,1,5]




/**
 * Definition of Interval:
 * classs Interval {
 *     int start, end;
 *     Interval(int start, int end) {
 *         this->start = start;
 *         this->end = end;
 *     }
 */
 

class Solution { 
public:
    /**
     *@param A, queries: Given an integer array and an query list
     *@return: The result list
     */
     
    class SegmentTreeNode
    {
    public:
        int min;
        int start;
        int end;
        SegmentTreeNode* left;
        SegmentTreeNode* right;
        SegmentTreeNode(int ss, int ee, int m)
        :start(ss),end(ee),min(m),left(NULL),right(NULL) {}
    };
    
    
    vector<int> intervalMinNumber(vector<int> &A, vector<Interval> &queries) {
        // write your code here
        
        if(A.empty()) return vector<int>();
        
        int n = A.size();
        
        SegmentTreeNode* root = buildSegmentTree(A, 0, n-1);
        
        
        //now query the value
        int m = queries.size();
        vector<int> res;
        for(int i = 0; i <m; i++)
        {
            int q = query(root, queries[i].start, queries[i].end);
            res.push_back(q);
        }
        
        return res;
    }
    
    int query(SegmentTreeNode* root, int qstart, int qend)
    {
        if(root == NULL) return INT_MAX;
        
        //no overlap
        if(root->start > qend || root->end < qstart)
        {
            return INT_MAX;
        }
        
        //total overlap
        if(qstart <= root->start && qend >= root->end)
        {
            return root->min;
        }
        
        //partial overlap
        int left = query(root->left, qstart, qend);
        int right = query(root->right, qstart, qend);
        
        return min(left, right);
    }
    
    SegmentTreeNode* buildSegmentTree(vector<int>& A, int start, int end)
    {
        if(start > end)
        {
            return NULL;
        }
        
        if(start == end)
        {
            return new SegmentTreeNode(start, end, A[start]);
        }
        
        int mid = start + (end-start)/2;
        SegmentTreeNode* left = buildSegmentTree(A, start, mid);
        SegmentTreeNode* right = buildSegmentTree(A, mid+1, end);
        
        int res = min(left->min, right->min);
        SegmentTreeNode* root = new SegmentTreeNode(start, end, res);
        
        root->left = left;
        root->right = right;
        return root;
    }
};
