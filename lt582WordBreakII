Word Break II

 Description
 Notes
 Testcase
 Judge
Given a string s and a dictionary of words dict, add spaces in s to construct a sentence where each word is a valid dictionary word.

Return all such possible sentences.

Have you met this question in a real interview? Yes
Example
Gieve s = lintcode,
dict = ["de", "ding", "co", "code", "lint"].

A solution is ["lint code", "lint co de"].

class Solution {
public:
    /**
     * @param s a string
     * @param wordDict a set of words
     */
    //possible[i]表示s[i...n-1] is able to be break
    //isword[i][j]表示s[i...j] is in dictionary
    vector<string> wordBreak(string s, unordered_set<string> &wordDict) {
        // Write your code here
        
        if(s.empty()) return vector<string>();
        vector<string> res;
        
        int n = s.length();
        vector<vector<bool>>isword(n, vector<bool>(n, false));
        
        for(int i = 0; i < n; i++)
        {
            for(int j = i; j < n; j++)
            {
                string sub = s.substr(i, j-i+1);
                if(wordDict.find(sub) != wordDict.end())
                {
                    isword[i][j] = true;
                }
            }
        }
        
        vector<bool> possible(n+1, false);
        possible[n] = true;
        for(int i = n-1; i>=0; i--)
        {
            for(int j = i; j < n; j++)
            {
                if(isword[i][j] && possible[j+1])
                {
                    possible[i] = true;
                    break;
                }
            }
        }
        
        
        
        
        dfs(s, wordDict, 0, "", res, isword, possible);
        return res;
    }
    
    void dfs(string s, unordered_set<string>& wordDict, int index, string sol, vector<string>& res, vector<vector<bool>>& isword, vector<bool>& possible)
    {
        if(!possible[index]) return;
        
        if(index == s.length())
        {
            //remove last " "
            sol.pop_back();
            res.push_back(sol);
            return;
        }
        
        string tmp = sol;
        for(int i = index; i < s.length(); i++)
        {
            if(!isword[index][i]) continue;
            string path = s.substr(index, i-index+1);
            sol += path + " ";
            dfs(s, wordDict, i+1, sol, res, isword, possible);
            sol = tmp;
        }
    }
};
