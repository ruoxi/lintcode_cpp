Minimum Path Sum

 Description
 Notes
 Testcase
 Judge
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

 Notice

You can only move either down or right at any point in time.
class Solution {
public:
    /**
     * @param grid: a list of lists of integers.
     * @return: An integer, minimizes the sum of all numbers along its path
     */
    //state: dp[i][j]表示从(0,0) 到(i,j)的minimum path sum
    //function: dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j];
    //initialization: dp[i][0] = dp[i-1][0]+grid[i][0], 
    //                dp[0][j] = dp[j-1][0] + grid[j][0]
    int minPathSum(vector<vector<int> > &grid) {
        // write your code here
        
        if(grid.empty() || grid.at(0).empty()) return 0;
        
        int n = grid.size();
        int m = grid.at(0).size();
        
        vector<vector<int>> dp(2, vector<int>(m, 0));
        
        dp[0][0] = grid[0][0];
 
        
        for(int j = 1; j < m; j++)
        {
            dp[0][j] = dp[0][j-1] + grid[0][j];
        }
        
        for(int i = 1; i < n; i++)
        {
            dp[i%2][0] = dp[(i-1)%2][0] + grid[i][0];
            for(int j = 1; j < m; j++)
            {
                dp[i%2][j] = min(dp[(i-1)%2][j], dp[i%2][j-1]) + grid[i][j];
            }
        }
        
        return dp[(n-1)%2][m-1];
    }
};
