Sort Colors II

 Description
 Notes
 Testcase
 Judge
Given an array of n objects with k different colors (numbered from 1 to k), sort them so that objects of the same color are adjacent, with the colors in the order 1, 2, ... k.

 Notice

You are not suppose to use the library's sort function for this problem.

Have you met this question in a real interview? Yes
Example
Given colors=[3, 2, 2, 1, 4], k=4, your code should sort colors in-place to [1, 2, 2, 3, 4].

//Runtime: O(nk)
class Solution{
public:
    /**
     * @param colors: A list of integer
     * @param k: An integer
     * @return: nothing
     */    
    void sortColors2(vector<int> &colors, int k) {
        // write your code here
        if(colors.empty()) return;
        
        
        int n = colors.size();
        int left = 0, right = n-1;
        int cnt = 0;
        while(cnt < k)
        {
            //get min and max in the range
            int minv = k+1;
            int maxv = 0;
            for(int i = left; i <= right; i++)
            {
                minv = min(colors[i],minv);
                maxv = max(colors[i], maxv);
            }
            
            //now put colors[i] == minv to begin of array
            //put colors[i] == maxv to end of array
            int l = left, r = right;
            for(int i = left; i <=r; )
            {
                if(colors[i] == minv)
                {
                    swap(colors[l], colors[i]);
                    l++;
                    i++;
                }
                else if(colors[i] == maxv)
                {
                    swap(colors[r], colors[i]);
                    r--;
                }
                else
                {
                    i++;
                }
            }
            
            left = l;
            right = r;
            cnt += 2;
        }
    }
};
