Sliding Window Matrix Maximum

 Description
 Notes
 Testcase
 Judge
Given an array of n * m matrix, and a moving matrix window (size k * k), move the window from top left to botton right at each iteration, find the maximum number inside the window at each moving.
Return 0 if the answer does not exist.

Have you met this question in a real interview? Yes
Example
For matrix

[
  [1, 5, 3],
  [3, 2, 1],
  [4, 1, 9],
]
The moving window size k = 2. 
return 13.

At first the window is at the start of the array like this

[
  [|1, 5|, 3],
  [|3, 2|, 1],
  [4, 1, 9],
]
,get the sum 11;
then the window move one step forward.

[
  [1, |5, 3|],
  [3, |2, 1|],
  [4, 1, 9],
]
,get the sum 11;
then the window move one step forward again.

[
  [1, 5, 3],
  [|3, 2|, 1],
  [|4, 1|, 9],
]
,get the sum 10;
then the window move one step forward again.

[
  [1, 5, 3],
  [3, |2, 1|],
  [4, |1, 9|],
]
,get the sum 13;
SO finally, get the maximum from all the sum which is 13.


class Solution {
public:
    /**
     * @param matrix an integer array of n * m matrix
     * @param k an integer
     * @return the maximum number
     */
    int maxSlidingMatrix(vector<vector<int>>& matrix, int k) {
        // Write your code here
        
        if(matrix.empty() || matrix.at(0).empty() || k == 0) return 0;
        
        int n = matrix.size();
        int m = matrix.at(0).size();
        
        if(n < k || m < k) return 0;
        
        vector<vector<int>> sums(n+1, vector<int>(m+1));
        
        for(int i = 1; i <= n; i++)
        {
            for(int j = 1; j <= m; j++)
            {
                sums[i][j] = sums[i-1][j] + sums[i][j-1] - sums[i-1][j-1] + matrix[i-1][j-1];
            }
        }
        
        int res = INT_MIN;
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                int lowerRightx = i+k-1;
                int lowerRighty = j+k-1;
                
                if(lowerRightx < n && lowerRighty < m)
                {
                    int s = sums[lowerRightx+1][lowerRighty+1] - sums[i][lowerRighty+1] - sums[lowerRightx+1][j] + sums[i][j];
                    
                    res = max(res, s);
                }
            }
        }
        return res;
        
    }
};
