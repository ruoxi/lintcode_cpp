Construct Binary Tree from Inorder and Postorder Traversal
Given inorder and postorder traversal of a tree, construct the binary tree.

 Notice

You may assume that duplicates do not exist in the tree.

Have you met this question in a real interview? Yes
Example
Given inorder [1,2,3] and postorder [1,3,2], return a tree:

  2
 / \
1   3
/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
 

class Solution {
    /**
     *@param inorder : A list of integers that inorder traversal of a tree
     *@param postorder : A list of integers that postorder traversal of a tree
     *@return : Root of a tree
     */
public:
    TreeNode *buildTree(vector<int> &inorder, vector<int> &postorder) {
        // write your code here
        if(inorder.empty() && postorder.empty()) return NULL;
        
        int n = inorder.size();
        return helper(inorder, 0, n-1, postorder, 0, n-1);
    }
    
    TreeNode* helper(vector<int>& inorder, int starti, int endi, vector<int>& postorder, int startp, int endp)
    {
        if(starti > endi) return NULL;
        
        //root is the end of postorder
        TreeNode* root = new TreeNode(postorder[endp]);
        
        //find root in inorder
        vector<int>::iterator it = find(inorder.begin()+starti, inorder.begin()+endi, postorder[endp]);
        
        int left_size = it - (inorder.begin() + starti);
        
        root->left = helper(inorder, starti, starti+left_size-1, postorder, startp, startp+left_size-1);
        root->right = helper(inorder, starti+left_size+1, endi, postorder, startp+left_size, endp-1);
        return root;
    }
};
