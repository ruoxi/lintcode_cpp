Construct Binary Tree from Preorder and Inorder Traversal

Given preorder and inorder traversal of a tree, construct the binary tree.

 Notice

You may assume that duplicates do not exist in the tree.

Have you met this question in a real interview? Yes
Example
Given in-order [1,2,3] and pre-order [2,1,3], return a tree:

  2
 / \
1   3

/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
 

class Solution {
    /**
     *@param preorder : A list of integers that preorder traversal of a tree
     *@param inorder : A list of integers that inorder traversal of a tree
     *@return : Root of a tree
     */
public:
    TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder) {
        // write your code here
        if(preorder.empty() && inorder.empty()) return NULL;
        
        int n = preorder.size();
        return helper(preorder, 0, n-1, inorder, 0, n-1);
    }
    
    TreeNode *helper(vector<int>& preorder, int startp, int endp, vector<int>& inorder, int starti, int endi)
    {
        if(starti > endi) return NULL;
        
        //root is startp
        TreeNode* root = new TreeNode(preorder[startp]);
        
        vector<int>::iterator it = find(inorder.begin()+starti, inorder.begin()+endi, preorder[startp]);
        
        //last index of left tree
        int left_size = it - (inorder.begin() + starti);
    
        
        root->left = helper(preorder, startp+1, startp+left_size, inorder, starti, starti+left_size-1);
        
        root->right = helper(preorder,startp+left_size+1, endp, inorder, starti+left_size+1, endi);
        
        return root;
    }
};
