Convert Expression to Reverse Polish Notation

 Description
 Notes
 Testcase
 Judge
Given an expression string array, return the Reverse Polish notation of this expression. (remove the parentheses)

Have you met this question in a real interview? Yes
Example
For the expression [3 - 4 + 5] (which denote by ["3", "-", "4", "+", "5"]), return [3 4 - 5 +] (which denote by ["3", "4", "-", "5", "+"])




class Solution {
public:
    /**
     * @param expression: A string array
     * @return: The Reverse Polish notation of this expression
     */
     
    int getweight(string& str)
    {
        if(str == "+" || str == "-")
        {
            return 1;
        }
        else if(str == "*" || str == "/")
        {
            return 2;
        }
        else if(str == "(" )
        {
            return 0;
        }
        return 3;
    }
    
    //give digits a largest weight
    //the smaller the weight, the higher the node in the tree
    vector<string> convertToRPN(vector<string> &expression) {
        // write your code here
        
        if(expression.empty()) return vector<string>();
        
        int n = expression.size();
        
        vector<string> res;
        
        stack<string> stk;
        
        for(int i = 0; i < n; i++)
        {
            string cur = expression[i];
            
            if(cur == "(")
            {
                stk.push("(");
                continue;
            }
            else if(cur == ")")
            {
                //need to pop from stk until hit (
                while(stk.top() != "(")
                {
                    res.push_back(stk.top());
                    stk.pop();
                }
                
                stk.pop();
                continue;
            }
            
            int weight = getweight(cur);
            
            while(!stk.empty() && weight <= getweight(stk.top()))
            {
                res.push_back(stk.top());
                stk.pop();
            }
           
            stk.push(cur);
            
        }
        
        while(!stk.empty())
        {
            res.push_back(stk.top());
            stk.pop();
        }
        
        return res;
    }
};
