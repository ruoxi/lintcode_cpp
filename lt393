Best Time to Buy and Sell Stock IV

 Description
 Notes
 Testcase
 Judge
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most k transactions.

 Notice

You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).

Have you met this question in a real interview? Yes
Example
Given prices = [4,4,6,1,1,4,2,5], and k = 2, return 6.


class Solution {
public:
    /**
     * @param k: An integer
     * @param prices: Given an integer array
     * @return: Maximum profit
     */
    //state: local[i][j]表示前i天进行j个transaction 并且第i天进行第j次transaction
    //       global[i][j]表示前i天进行j次transaction
    //function: local[i][j] = max(local[i-1][j] + prices[i]-prices[i-1],
    //                          global[i-1][j-1]+prices[i]-prices[i-1])
    //          global[i][j] = max(global[i-1][j], local[i][j])
    //initialization: local[0][j] = 0 global[0][j] = 0
    int maxProfit(int k, vector<int> &prices) {
        // write your code here
        
        
        int n = prices.size();
        
        int res = 0;
        if(k >= n/2)
        {
            for(int i = 1; i < n; i++)
            {
                if(prices[i] > prices[i-1])
                {
                    res += prices[i]-prices[i-1];
                }
            }
            return res;
        }
        
        vector<vector<int>> local(n, vector<int>(k+1, 0));
        vector<vector<int>> global(n, vector<int>(k+1, 0));
        
        for(int i = 1; i <n; i++)
        {
            int diff = prices[i] - prices[i-1];
            for(int j = 1; j <= k; j++)
            {
                
                local[i][j] = max(local[i-1][j] + diff, global[i-1][j-1]+diff);
                global[i][j] = max(global[i-1][j], local[i][j]);
            }
        }
        
        return global[n-1][k];
    }
};
