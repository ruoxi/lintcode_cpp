Drop Eggs II

 Description
 Notes
 Testcase
 Judge
There is a building of n floors. If an egg drops from the k th floor or above, it will break. If it's dropped from any floor below, it will not break.

You're given m eggs, Find k while minimize the number of drops for the worst case. Return the number of drops in the worst case.

Have you met this question in a real interview? Yes
Example
Given m = 2, n = 100 return 14
Given m = 2, n = 36 return 8




class Solution {
public:
    /**
     * @param m the number of eggs
     * @param n the umber of floors
     * @return the number of drops in the worst case
     */
    //state:dp[i][j]还剩i层楼j个鸡蛋的 minimum worst case
    //function: dp[i][j] = min{ max(dp[i-1][j-1] //在i层楼鸡蛋碎了
    //                          , dp[n-i][j] //在i层楼鸡蛋没碎)}
    //initialization:dp[1][j] = 1, dp[0][j] = 0
    //               dp[i][1] = i;
    int dropEggs2(int m, int n) {
        // Write your code here
        
        vector<vector<int>> dp(n+1, vector<int>(m+1, 0));
        
        for(int j = 0; j <= m; j++)
        {
            dp[1][j] = 1;
            dp[0][j] = 0;
        }
        
        for(int i = 2; i <=n; i++)
        {
            dp[i][1] = i;
        }
        
        for(int j = 2; j <=m; j++)
        {
            for(int i = 2; i <=n; i++)
            {
                dp[i][j] = INT_MAX;
                int res = j;
                for(int k = 1; k<=i; k++)
                {
                    dp[i][j] = min(dp[i][j], max(dp[k-1][j-1], dp[i-k][j])+1);
                }
            }
        }
        
        return dp[n][m];
    }
};
