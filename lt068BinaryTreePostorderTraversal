 Binary Tree Postorder Traversal
 
 Given a binary tree, return the postorder traversal of its nodes' values.

Have you met this question in a real interview? Yes
Example
Given binary tree {1,#,2,3},

   1
    \
     2
    /
   3
 

return [3,2,1].
/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: Postorder in vector which contains node values.
     */
public:
    vector<int> postorderTraversal(TreeNode *root) {
        // write your code here
        if(root == NULL) return vector<int>();
        
        TreeNode* cur = NULL;
        TreeNode* prev = NULL;
        
        stack<TreeNode*> stk;
        stk.push(root);
        
        vector<int> res;
        while(!stk.empty())
        {
            cur = stk.top();
            
            //traverse down the tree
            if(prev == NULL || prev->left == cur || prev->right == cur)
            {
                if(cur->left != NULL)
                {
                    stk.push(cur->left);
                }
                else if(cur->right != NULL)
                {
                    stk.push(cur->right);
                }
            }
            else if(cur->left == prev) //traverse up from left subtree
            {
                if(cur->right != NULL)
                {
                    stk.push(cur->right);
                }
            }
            else //traverse up from right subtree or at the leaf node
            {
                res.push_back(cur->val);
                stk.pop();
            }
            
            prev = cur;
        }
        
        return res;
    }
};
