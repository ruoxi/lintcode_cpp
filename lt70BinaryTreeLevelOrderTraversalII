Binary Tree Level Order Traversal II

Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

Have you met this question in a real interview? Yes
Example
Given binary tree {3,9,20,#,#,15,7},

    3
   / \
  9  20
    /  \
   15   7
 

return its bottom-up level order traversal as:

[
  [15,7],
  [9,20],
  [3]
]
/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
 
 
class Solution {
    /**
     * @param root : The root of binary tree.
     * @return : buttom-up level order a list of lists of integer
     */
public:
    vector<vector<int>> levelOrderBottom(TreeNode *root) {
        // write your code here
        if(root == NULL) return vector<vector<int>>();
        
        vector<vector<int>> res;
        queue<TreeNode*> q;
        q.push(root);
        
        
        while(!q.empty())
        {
            int size = q.size();
            vector<int> level(size, 0);
            for(int i = 0; i < size; i++)
            {
                TreeNode* cur = q.front(); q.pop();
                
                level[i] = cur->val;
                
                if(cur->left != NULL) q.push(cur->left);
                if(cur->right != NULL) q.push(cur->right);
                
            }
            
            res.push_back(level);
        }
        
        reverse(res.begin(), res.end());
        
        return res;
    }
};
