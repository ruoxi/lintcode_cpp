 Longest Common Substring

 Description
 Notes
 Testcase
 Judge
Given two strings, find the longest common substring.

Return the length of it.

 Notice

The characters in substring should occur continuously in original string. This is different with subsequence.

Have you met this question in a real interview? Yes
Example
Given A = "ABCD", B = "CBCE", return 2.

Challenge 
O(n x m) time and memory.
class Solution {
public:    
    /**
     * @param A, B: Two string.
     * @return: the length of the longest common substring.
     */
    //双序列型dp
    //state: dp[i][j]表示A[0...i-1] 和B[0...j]的lcs ended with A[i-1]和B[j-1]
    //注意这里与longest common subsequence 不同,这里必须是连续的子序列
    //function: dp[i][j] = dp[i-1][j-1]+1 if(A[i-1] == B[j-1])
    //                   = 0 if(A[i-1] != B[j-1])
    //initialization: dp[i][0] = 0, dp[0][j] = 0
    int longestCommonSubstring(string &A, string &B) {
        // write your code here
        
        if(A.empty() || B.empty()) return 0;
        
        int n = A.length();
        int m = B.length();
        int res = 0;
        vector<vector<int>> dp(n+1, vector<int>(m+1, 0));
        
        for(int i = 1; i <=n; i++)
        {
            for(int j = 1; j <=m; j++)
            {
                if(A[i-1] == B[j-1])
                {
                    dp[i][j] = dp[i-1][j-1]+1;
                    res = max(res, dp[i][j]);
                }
            }
        }
        
        return res;
    }
};
