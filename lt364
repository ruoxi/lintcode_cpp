Trapping Rain Water II

 Description
 Notes
 Testcase
 Judge
Given n x m non-negative integers representing an elevation map 2d where the area of each cell is 1 x 1, compute how much water it is able to trap after raining.

Example
Given 5*4 matrix

[12,13,0,12]
[13,4,13,12]
[13,8,10,12]
[12,13,12,12]
[13,13,13,13]
return 14.


//Runtime: O(mn)
//Space: O(mn)

class Solution {
public:
    /**
     * @param heights: a matrix of integers
     * @return: an integer
     */
     
    class Point
    {
    public:
        int x;
        int y;
        int h;
        Point(int xx, int yy, int hh)
        :x(xx), y(yy), h(hh) {}
    };
    
    
    class Comparator
    {
    public:
        bool operator()(const Point& a, const Point& b)
        {
            if(a.h != b.h)
                return a.h > b.h;
                
            return false;
        }
    };
    
    vector<int> dx = {1, -1, 0, 0};
    vector<int> dy = {0, 0, 1, -1};
    int trapRainWater(vector<vector<int> > &heights) {
        // write your code here
        
        if(heights.empty() || heights.at(0).empty()) return 0;
        
        int n = heights.size();
        int m = heights[0].size();
        
        int res = 0;
        vector<vector<bool>> visited(n, vector<bool>(m, false));
        //add the border to priority queue
        //min heap
        priority_queue<Point, vector<Point>, Comparator> pq;
        
        for(int i = 0; i < n; i++)
        {
            pq.push(Point(i, 0, heights[i][0]));
            pq.push(Point(i, m-1, heights[i][m-1]));
            visited[i][0] = true;
            visited[i][m-1] = true;
        }
        
        for(int j = 0; j < m; j++)
        {
            pq.push(Point(0, j, heights[0][j]));
            pq.push(Point(n-1, j, heights[n-1][j]));
            visited[0][j] = true;
            visited[n-1][j] = true;
        }
        
        while(!pq.empty())
        {
            int curx = pq.top().x;
            int cury = pq.top().y;
            int curh = pq.top().h;
            pq.pop();
            
            //check its neighbor
            
            for(int i = 0; i < 4; i++)
            {
                int nextx = curx + dx[i];
                int nexty = cury + dy[i];
                
                if(nextx >= 0 && nextx < n && nexty >=0 && nexty < m 
                && !visited[nextx][nexty])
                {
                    if(heights[nextx][nexty] < curh)
                    {
                        res += curh - heights[nextx][nexty];
                    }
                    pq.push(Point(nextx, nexty, max(heights[nextx][nexty], curh)));
                    visited[nextx][nexty] = true;;
                    
                }
            }
        }
        
        return res;
        
    }
};
