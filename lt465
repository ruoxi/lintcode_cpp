Kth Smallest Sum In Two Sorted Arrays

 Description
 Notes
 Testcase
 Judge
Given two integer arrays sorted in ascending order and an integer k. Define sum = a + b, where a is an element from the first array and b is an element from the second one. Find the kth smallest sum out of all possible sums.

Have you met this question in a real interview? Yes
Example
Given [1, 7, 11] and [2, 4, 6].

For k = 3, return 7.

For k = 4, return 9.

For k = 8, return 15.

//Runtime:O(klogk)
//Space: O(n)

class Solution {
public:
    /**
     * @param A an integer arrays sorted in ascending order
     * @param B an integer arrays sorted in ascending order
     * @param k an integer
     * @return an integer
     */
    
    //A和B各自有一个pointer,每次算出a[i] + b[j]的值，放入min heap中
    //从minheap 中取出最小值对应的i, j, 分别算出a[i+1]+b[j]和a[i] +b[j+1]放入min heap中
    //这样loopk次，就能拿到第K小的sum
    
    class Point
    {
    public:
        int x;
        int y;
        int sum;
        Point(int xx, int yy, int s)
        {
            x = xx;
            y = yy;
            sum = s;
        }
    };
    
    class Comparator
    {
    public:
        bool operator()(const Point& a, const Point&b)
        {
            return a.sum > b.sum;
        }
    };
    
    vector<int> dx = {0, 1};
    vector<int> dy = {1, 0};
    int kthSmallestSum(vector<int>& A, vector<int>& B, int k) {
        // Write your code here
        
        if(A.empty()) return B[k];
        if(B.empty()) return A[k];
        
        int n = A.size();
        int m = B.size();
        
        priority_queue<Point, vector<Point>, Comparator> pq;
        
        pq.push(Point(0, 0, A[0]+B[0]));
        
        vector<vector<bool>> visited(n, vector<bool>(m, false));
        
        visited[0][0] = true;
        
        int res = 0;
        for(int i = 0; i < k; i++)
        {
            int curx = pq.top().x;
            int cury = pq.top().y;
            res = pq.top().sum;
            pq.pop();
            for(int j = 0; j < 2;j++)
            {
                int nx = curx + dx[j];
                int ny = cury + dy[j];
                
                if(nx < n && ny < m && !visited[nx][ny])
                {
                    pq.push(Point(nx, ny, A[nx] + B[ny]));
                    visited[nx][ny] = true;
                }
                
            }
        }
        
        return res;
    }
};
