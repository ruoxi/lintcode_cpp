Distinct Subsequences

 Description
 Notes
 Testcase
 Judge
Given a string S and a string T, count the number of distinct subsequences of T in S.

A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).

Have you met this question in a real interview? Yes
Example
Given S = "rabbbit", T = "rabbit", return 3.
class Solution {
public:    
    /**
     * @param S, T: Two string.
     * @return: Count the number of distinct subsequences
     */
    //双序列型dp
    //state: dp[i][j]表示s[0...i-1]中有多少个t[0...j-1]
    //function: dp[i][j] = dp[i-1][j-1] + dp[i-1][j] if(s[i-1] == t[j-1])
    //                   = dp[i-1][j] if(s[i-1] != t[j-1])
    //initialization: dp[i][0] = 1 dp[0][j] = 0 where j > 0
    int numDistinct(string &S, string &T) {
        // write your code here
        int n = S.length();
        int m = T.length();
        
        vector<vector<int>> dp(2, vector<int>(m+1, 0));
        
        for(int i = 0; i < 2; i++)
        {
            dp[i][0] = 1;
        }
        
        for(int j = 1; j <=m; j++)
        {
            dp[0][j] = 0;
        }
        
        for(int i = 1; i <= n; i++)
        {
            for(int j = 1; j <=m; j++)
            {
                dp[i%2][j] = dp[(i-1)%2][j];
                
                if(S[i-1] == T[j-1])
                {
                    dp[i%2][j] += dp[(i-1)%2][j-1];
                }
            }
        }
        
        return dp[n%2][m];
        
    }
};
