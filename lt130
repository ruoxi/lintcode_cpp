Heapify

 Description
 Notes
 Testcase
 Judge
Given an integer array, heapify it into a min-heap array.

For a heap array A, A[0] is the root of heap, and for each A[i], A[i * 2 + 1] is the left child of A[i] and A[i * 2 + 2] is the right child of A[i].
Have you met this question in a real interview? Yes
Clarification
What is heap?

Heap is a data structure, which usually have three methods: push, pop and top. where "push" add a new element the heap, "pop" delete the minimum/maximum element in the heap, "top" return the minimum/maximum element.

What is heapify?
Convert an unordered integer array into a heap array. If it is min-heap, for each element A[i], we will get A[i * 2 + 1] >= A[i] and A[i * 2 + 2] >= A[i].

What if there is a lot of solutions?
Return any of them.
Example
Given [3,2,1,4,5], return [1,2,3,4,5] or any legal heap array.


//Runtime: O(n)
//Space: O(1)

class Solution {
public:
    /**
     * @param A: Given an integer array
     * @return: void
     */
     
    void heapify(vector<int> &A) {
        // write your code here
        
        //start from the first node which is not leaf, 
        //compare with its left and right child 2i+1 and 2i+2
        //sift down the one which is larger
        if(A.empty()) return;
        int n = A.size();
        for(int i = (n-1)/2; i>=0; i--)
        {
            siftdown(A, i);
        }
    }
    
    void siftdown(vector<int>& A, int index)
    {
        int n = A.size();
        if(index >= n || index*2+1 >=n) return;
        
        int son = index;
        if(A[index*2+1] < A[son])
        {
            son = index*2 + 1;
        }
        
        if(index*2+2  < n && A[index*2+2] < A[son])
        {
            son = index*2 + 2;
        }
        
        if(son == index) return;
        
        swap(A[index], A[son]);
        
        siftdown(A, son);
        
        
    }
};
