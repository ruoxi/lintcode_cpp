Triangle

 Description
 Notes
 Testcase
 Judge
Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

 Notice

Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.
class Solution {
public:
    /**
     * @param triangle: a list of lists of integers.
     * @return: An integer, minimum path sum.
     */
    //state: dp[i][j]表示从最底层到(i,j)点的minimum path sum
    //function: dp[i][j] = min(dp[i+1][j], dp[i+1][j+1]) + triangle[i][j]
    //initialization: dp[n-1][j] = triangle[n-1][j]
    int minimumTotal(vector<vector<int> > &triangle) {
        // write your code here
        
        if(triangle.empty() || triangle.at(0).empty()) return 0;
        
        int n = triangle.size();
        
        vector<vector<int>> dp(2, vector<int>(n+1, 0));
        
        for(int j = 0; j <= n; j++)
        {
            dp[(n-1)%2][j] = triangle[n-1][j];
        }
        
        for(int i = n-2; i >=0; i--)
        {
            for(int j = 0; j <=i; j++)
            {
                dp[i%2][j] = min(dp[(i+1)%2][j], dp[(i+1)%2][j+1]) + triangle[i][j];
            }
        }
        
        return dp[0][0];
    }
};
