 Drop Eggs

 Description
 Notes
 Testcase
 Judge
There is a building of n floors. If an egg drops from the k th floor or above, it will break. If it's dropped from any floor below, it will not break.

You're given two eggs, Find k while minimize the number of drops for the worst case. Return the number of drops in the worst case.

Have you met this question in a real interview? Yes
Clarification
For n = 10, a naive way to find k is drop egg from 1st floor, 2nd floor ... kth floor. But in this worst case (k = 10), you have to drop 10 times.

Notice that you have two eggs, so you can drop at 4th, 7th & 9th floor, in the worst case (for example, k = 9) you have to drop 4 times.

Example
Given n = 10, return 4.
Given n = 100, return 14.



class Solution {
public:
    /**
     * @param n an integer
     * @return an integer
     */
    //Let we make our first attempt on x'th floor. 

    //If it breaks, we try remaining (x-1) floors one by one. 
    //So in worst case, we make x trials.

    //If it doesnâ€™t break, we jump (x-1) floors (Because we have
    //already made one attempt and we don't want to go beyond 
    //x attempts.  Therefore (x-1) attempts are available),
    //Next floor we try is floor x + (x-1)

    //Similarly, if this drop does not break, next need to jump 
    //up to floor x + (x-1) + (x-2), then x + (x-1) + (x-2) + (x-3)
    //and so on.

    //Since the last floor to be tired is 100'th floor, sum of
    //series should be 100 for optimal value of x.

    //x + (x-1) + (x-2) + (x-3) + .... + 1  =n
    //therefore, x gives maximum attemps
    int dropEggs(int n) {
        // Write your code here
     
        int x = 0;
        long sum = 0;
        
        while(sum < n)
        {
            x++;
            sum+=x;
        }
        
        return x;
        
    }
};
