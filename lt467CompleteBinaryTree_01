Complete Binary Tree
Check a binary tree is completed or not. A complete binary tree is a binary tree that every level is completed filled except the deepest level. In the deepest level, all nodes must be as left as possible. See more definition

Have you met this question in a real interview? Yes
Example
    1
   / \
  2   3
 /
4
is a complete binary.

    1
   / \
  2   3
   \
    4
is not a complete binary.

/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param root, the root of binary tree.
     * @return true if it is a complete binary tree, or false.
     */
    bool isComplete(TreeNode* root) {
        // Write your code here
        if(root == NULL) return true;
        
        queue<TreeNode*> q;
        q.push(root);
        
        bool foundNull = false;
        
        while(!q.empty())
        {
            int size = q.size();
            
            for(int i = 0; i < size; i++)
            {
                TreeNode* cur = q.front();
                q.pop();
                
                if(cur->left != NULL)
                {
                    //cout << "cur->left=" << cur->left->val << " foundNull=" <<foundNull << endl; 
                    if(foundNull) return false;
                    q.push(cur->left);
                }
                else 
                {
                    //cout <<"foundNull before =" <<foundNull << endl;
                    if(!foundNull) foundNull = true;
                    //cout << "cur left is null foundNull=" << foundNull << endl;
                }

                
                if(cur->right != NULL)
                {
                    //cout << "cur->right=" << cur->right->val << " foundNull=" <<foundNull << endl; 
                    if(foundNull) return false;
                    q.push(cur->right);
                }
                else 
                {
                    if(!foundNull) foundNull = true;
                }
                
            }
        }
        
        return true;
    }
};
