Validate Binary Search Tree

 Description
 Notes
 Testcase
 Judge
Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
A single node tree is a BST
Have you met this question in a real interview? Yes
Example
An example:

  2
 / \
1   4
   / \
  3   5
The above binary tree is serialized as {2,1,4,#,#,3,5} (in level order).

/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param root: The root of binary tree.
     * @return: True if the binary tree is BST, or false
     */
    //inorder traversal will give a sorted list
    bool isValidBST(TreeNode *root) {
        // write your code here
        if(root == NULL) return true;
        
        TreeNode* prev = NULL;
        
        return helper(root, prev);
    }
    
    //inorder traversal
    bool helper(TreeNode* root, TreeNode*& prev)
    {
        if(root == NULL) return true;
        
        bool left = helper(root->left, prev);
        
        if(!left) return false;
        if(prev == NULL)
        {
            prev = root;
        }
        else
        {
            //check if prev < root
            if(prev->val >= root->val) return false;
            prev = root;
        }
        
        bool right = helper(root->right, prev);
        if(!right) return false;
        
        
        return true;
        
    }
};
