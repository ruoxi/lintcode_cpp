Inorder Successor in Binary Search Tree
Given a binary search tree (See Definition) and a node in it, find the in-order successor of that node in the BST.

If the given node has no in-order successor in the tree, return null.

 Notice

It's guaranteed p is one node in the given tree. (You can directly compare the memory address to find p)

Have you met this question in a real interview? Yes
Example
Given tree = [2,1] and node = 1:

  2
 /
1
return node 2.

Given tree = [2,1,3] and node = 2:

  2
 / \
1   3
return node 3.


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
 
//利用bst的特性来决定走左子树还是右子树
//要注意的是，当找到target, 如果target->right不是空，就应该return left most child of target->right
//如果target->right是空，那么就要return prev
//这个prev就是inorder顺序下下一个要打印的node
//prev在我们向左走的时候需要update,因为表示当前的node还没有打印
//如果向右走的时候则不需要update,因为当前node已经打印完，prev需要指向当前node的parent
class Solution {
public:
    TreeNode* inorderSuccessor(TreeNode* root, TreeNode* p) {
        // write your code here
        
        if(root == NULL || p == NULL) return NULL;
        TreeNode* successor = NULL;
        while(root != NULL && root != p)
        {
            if(root->val > p->val)
            {
                successor = root;
                root = root->left;
            }
            else
            {
                root = root->right;
            }
        }
        
        if(root == NULL)
        {
            return NULL;
        }
        
        if(root->right == NULL)
        {
            return successor;
        }
        
        root = root->right;
        while(root->left != NULL)
        {
            root = root->left;
        }
        
        return root;
    }
};
