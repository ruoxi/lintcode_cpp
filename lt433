Number of Islands
Given a boolean 2D matrix, find the number of islands.

 Notice

0 is represented as the sea, 1 is represented as the island. If two 1 is adjacent, we consider them in the same island. We only consider up/down/left/right adjacent.

Have you met this question in a real interview? Yes
Example
Given graph:

[
  [1, 1, 0, 0, 0],
  [0, 1, 0, 0, 1],
  [0, 0, 0, 1, 1],
  [0, 0, 0, 0, 0],
  [0, 0, 0, 0, 1]
]
return 3.

class Solution {
public:
    /**
     * @param grid a boolean 2D matrix
     * @return an integer
     */
    int numIslands(vector<vector<bool>>& grid) {
        // Write your code here
        if(grid.empty() || grid.at(0).empty()) return 0;
        
        int n = grid.size();
        int m = grid.at(0).size();
        
        vector<vector<bool>> visited(n, vector<bool>(m, false));
        
        int res = 0;
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j <m; j++)
            {
                if(grid[i][j] && !visited[i][j])
                {
                    bfs(grid, visited, i, j);
                    res++;
                }
            }
        }
        return res;
    }
    
    vector<int> dx= {1, -1, 0, 0};
    vector<int> dy= {0, 0, 1, -1};
    void bfs(vector<vector<bool>>& grid, vector<vector<bool>>& visited, int i, int j)
    {
        queue<pair<int, int>> q;
        q.push(make_pair(i, j));
        
        while(!q.empty())
        {
            int curx = q.front().first;
            int cury = q.front().second;
            q.pop();
            for(int m = 0; m <4; m++)
            {
                int nextx = curx+dx[m];
                int nexty = cury+dy[m];
                
                if(nextx >=0 && nextx < grid.size() && nexty >=0 && nexty < grid.at(0).size() && !visited[nextx][nexty] && grid[nextx][nexty])
                {
                    q.push(make_pair(nextx, nexty));
                    visited[nextx][nexty] = true;
                }
            }
            
        }
    }
};
