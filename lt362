Sliding Window Maximum 
Given an array of n integer with duplicate number, and a moving window(size k), move the window at each iteration from the start of the array, find the maximum number inside the window at each moving. 

Example 

For array [1, 2, 7, 7, 8], moving window size k = 3. return [7, 7, 8]

At first the window is at the start of the array like this 

[|1, 2, 7| ,7, 8] , return the maximum 7;

then the window move one step forward.

[1, |2, 7 ,7|, 8], return the maximum 7;

then the window move one step forward again.

[1, 2, |7, 7, 8|], return the maximum 8;


class Solution {
public:
    /**
     * @param nums: A list of integers.
     * @return: The maximum number inside the window at each moving.
     */
    vector<int> maxSlidingWindow(vector<int> &nums, int k) {
        // write your code here
        if(nums.empty()) return vector<int>();
        
        int n = nums.size();
        deque<int> dq;
        vector<int> res;
        int left = 0;
        for(int i = 0; i < n; i++)
        {

            //check if need to kick out any element
            if(dq.empty())
            {
                dq.push_back(i);
            }
            else
            {
                while(!dq.empty() && nums[dq.back()] < nums[i])
                {
                    dq.pop_back();
                }
                    
                dq.push_back(i);
            }
            
            
            //check if need to remove the old element
            while(!dq.empty() && left > dq.front())
            {
                dq.pop_front();
            }
            
            if(i-left >=k-1)
            {
                res.push_back(nums[dq.front()]);
                left++;
            }
            
            
        }
        return res;
    }
};
